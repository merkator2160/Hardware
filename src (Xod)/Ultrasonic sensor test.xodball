{
  "description": "A crash course tutorial baked as a project",
  "license": "MIT",
  "name": "welcome-to-xod",
  "patches": {
    "@/001-hello": {
      "links": {
        "B11CpTEUS": {
          "id": "B11CpTEUS",
          "input": {
            "nodeId": "r1Z6ppVLS",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "B10XMTVUS",
            "pinKey": "S13xLCuHvkW"
          }
        },
        "BJ-gmp48r": {
          "id": "BJ-gmp48r",
          "input": {
            "nodeId": "ByPtyaE8H",
            "pinKey": "BkeKcj6ZZ"
          },
          "output": {
            "nodeId": "B10XMTVUS",
            "pinKey": "S13xLCuHvkW"
          }
        },
        "BJbhfaVLH": {
          "id": "BJbhfaVLH",
          "input": {
            "nodeId": "B10XMTVUS",
            "pinKey": "S1yZIA_rDJZ"
          },
          "output": {
            "nodeId": "Sy8Of6EIB",
            "pinKey": "r1if8ROSDJ-"
          }
        },
        "Bk1oTTVUr": {
          "id": "Bk1oTTVUr",
          "input": {
            "nodeId": "B10XMTVUS",
            "pinKey": "r1AgIROHDJW"
          },
          "output": {
            "nodeId": "SynJ66EIS",
            "pinKey": "HJhXDIY9-"
          }
        },
        "BkUadT4LB": {
          "id": "BkUadT4LB",
          "input": {
            "nodeId": "rydTzaVIr",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "H1g5od6V8B",
            "pinKey": "BkQzLCurwJZ"
          }
        },
        "By-qi_64UB": {
          "id": "By-qi_64UB",
          "input": {
            "nodeId": "H1g5od6V8B",
            "pinKey": "B1GfLR_SPk-"
          },
          "output": {
            "nodeId": "Skqo_p48S",
            "pinKey": "Syn7fWCLZ"
          }
        },
        "BySTOpEUH": {
          "id": "BySTOpEUH",
          "input": {
            "nodeId": "HyeUf6EUS",
            "pinKey": "HJG8C_SPkb"
          },
          "output": {
            "nodeId": "H1g5od6V8B",
            "pinKey": "BkQzLCurwJZ"
          }
        },
        "H1ApuTV8S": {
          "id": "H1ApuTV8S",
          "input": {
            "nodeId": "H1i6OTVLH",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "Skqo_p48S",
            "pinKey": "Syn7fWCLZ"
          }
        },
        "HJw6M6EUB": {
          "id": "HJw6M6EUB",
          "input": {
            "nodeId": "BJQTf64LH",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "HyeUf6EUS",
            "pinKey": "H1E8AuSPkZ"
          }
        },
        "Hk03p6VLH": {
          "id": "Hk03p6VLH",
          "input": {
            "nodeId": "H1j5Hz6DN",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "SynJ66EIS",
            "pinKey": "HJhXDIY9-"
          }
        },
        "Hki56T4Lr": {
          "id": "Hki56T4Lr",
          "input": {
            "nodeId": "SynJ66EIS",
            "pinKey": "BJI7P8t9Z"
          },
          "output": {
            "nodeId": "B10XMTVUS",
            "pinKey": "S13xLCuHvkW"
          }
        },
        "HyeaG6N8S": {
          "id": "HyeaG6N8S",
          "input": {
            "nodeId": "rk5nfpE8H",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "Sy8Of6EIB",
            "pinKey": "r1if8ROSDJ-"
          }
        },
        "SJHiY6NIH": {
          "id": "SJHiY6NIH",
          "input": {
            "nodeId": "B10XMTVUS",
            "pinKey": "ryTeUROHD1b"
          },
          "output": {
            "nodeId": "H1g5od6V8B",
            "pinKey": "BkQzLCurwJZ"
          }
        },
        "r1hjyp4IB": {
          "id": "r1hjyp4IB",
          "input": {
            "nodeId": "BkjP3hVLr",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "ByPtyaE8H",
            "pinKey": "rksccsp-W"
          }
        },
        "r1mylpVLS": {
          "id": "r1mylpVLS",
          "input": {
            "nodeId": "SyeLnnEUB",
            "pinKey": "B1TSE9tZ-"
          },
          "output": {
            "nodeId": "ByPtyaE8H",
            "pinKey": "rksccsp-W"
          }
        },
        "rJIsG6VUS": {
          "id": "rJIsG6VUS",
          "input": {
            "nodeId": "Sy8Of6EIB",
            "pinKey": "ry3zLA_Bv1Z"
          },
          "output": {
            "nodeId": "HyeUf6EUS",
            "pinKey": "H1E8AuSPkZ"
          }
        },
        "rJrk96NLH": {
          "id": "rJrk96NLH",
          "input": {
            "nodeId": "Skqo_p48S",
            "pinKey": "rJPQfbCIW"
          },
          "output": {
            "nodeId": "SJm9BG6wE",
            "pinKey": "HJU8CE2lW"
          }
        },
        "rkLOFaELB": {
          "id": "rkLOFaELB",
          "input": {
            "nodeId": "HyeUf6EUS",
            "pinKey": "rJXICuSwyW"
          },
          "output": {
            "nodeId": "HkZIO6E8B",
            "pinKey": "B1x2RV3eZ"
          }
        }
      },
      "nodes": {
        "B10XMTVUS": {
          "id": "B10XMTVUS",
          "position": {
            "x": 14,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/if-else"
        },
        "BJQTf64LH": {
          "id": "BJQTf64LH",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "BkjP3hVLr": {
          "id": "BkjP3hVLr",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "ByPtyaE8H": {
          "arityLevel": 2,
          "boundLiterals": {
            "BkeKcj6ZZ-$1": "\" M\"",
            "BkeKcj6ZZ-$2": "\"\"",
            "Hkqu9oaWb": "\"Range: \""
          },
          "id": "ByPtyaE8H",
          "position": {
            "x": 13,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/concat"
        },
        "H1g5od6V8B": {
          "boundLiterals": {
            "SJ4zUC_BD1-": "170"
          },
          "description": "Multiply by 340 m/s (speed of sound) and divide by 2 (roundtrip)",
          "id": "H1g5od6V8B",
          "position": {
            "x": 15,
            "y": -1,
            "units": "slots"
          },
          "type": "xod/core/multiply"
        },
        "H1i6OTVLH": {
          "id": "H1i6OTVLH",
          "position": {
            "x": 9,
            "y": -1,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "H1j5Hz6DN": {
          "id": "H1j5Hz6DN",
          "position": {
            "x": 20,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "HkZIO6E8B": {
          "boundLiterals": {
            "B1x2RV3eZ": "Inf"
          },
          "id": "HkZIO6E8B",
          "position": {
            "x": 13,
            "y": -1,
            "units": "slots"
          },
          "type": "xod/core/constant-number"
        },
        "HyeUf6EUS": {
          "id": "HyeUf6EUS",
          "position": {
            "x": 13,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/core/equal"
        },
        "SJm9BG6wE": {
          "boundLiterals": {
            "B13SCNhl-": "1"
          },
          "id": "SJm9BG6wE",
          "position": {
            "x": 17,
            "y": -3,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "Skqo_p48S": {
          "boundLiterals": {
            "Bk2zMWALZ": "D13",
            "rJ0fMWALb": "D12"
          },
          "id": "Skqo_p48S",
          "position": {
            "x": 15,
            "y": -2,
            "units": "slots"
          },
          "type": "xod/common-hardware/hc-sr04-ultrasonic-time"
        },
        "Sy8Of6EIB": {
          "id": "Sy8Of6EIB",
          "position": {
            "x": 13,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/not"
        },
        "SyeLnnEUB": {
          "id": "SyeLnnEUB",
          "position": {
            "x": 11,
            "y": 5,
            "units": "slots"
          },
          "type": "xod/common-hardware/text-lcd-16x2-i2c"
        },
        "SynJ66EIS": {
          "id": "SynJ66EIS",
          "position": {
            "x": 18,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/defer"
        },
        "r1Z6ppVLS": {
          "id": "r1Z6ppVLS",
          "position": {
            "x": 17,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "rk5nfpE8H": {
          "id": "rk5nfpE8H",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "rydTzaVIr": {
          "id": "rydTzaVIr",
          "position": {
            "x": 18,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        }
      },
      "path": "@/001-hello"
    },
    "@/002-simulate": {
      "comments": {
        "HkT2f6bcN": {
          "content": "## 👆 Shortcut\n\nUse the button with a *gamepad* icon on the deployment pane to run the simulation with a single click. The deployment pane is at the bottom of the IDE window.",
          "id": "HkT2f6bcN",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 6,
            "units": "slots"
          }
        },
        "rkDASa1dN": {
          "content": "# Running Simulation\n\nEventually, you will want deploy to some real hardware. But for the start, XOD also offers a simulation mode that allows running a program right inside the IDE.\n\nIt's useful to quickly test some ideas or just play around.\n\n## Exercise\n\nLet's learn how to run our program!\n\n1. Hit Deploy → Simulate from the main menu.\n2. Observe how your current patch opens in a special “Debugger” tab, and the `watch` node becomes alive demonstrating the current counter value.\n3. To finish the simulation session press the “Stop” button in the upper right corner or close the debugger tab.\n",
          "id": "rkDASa1dN",
          "position": {
            "x": -2,
            "y": -1,
            "units": "slots"
          },
          "size": {
            "height": 4,
            "width": 8,
            "units": "slots"
          }
        }
      },
      "links": {
        "HkzE6HMaPV": {
          "id": "HkzE6HMaPV",
          "input": {
            "nodeId": "ryZVTSM6vE",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "H1lV6HGTvE",
            "pinKey": "r1yhZRd8W"
          }
        },
        "SyXEaSz6vN": {
          "id": "SyXEaSz6vN",
          "input": {
            "nodeId": "H1lV6HGTvE",
            "pinKey": "HJAq-A_8-"
          },
          "output": {
            "nodeId": "Hy4przaDV",
            "pinKey": "HJU8CE2lW"
          }
        }
      },
      "nodes": {
        "H1lV6HGTvE": {
          "id": "H1lV6HGTvE",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/count"
        },
        "Hy4przaDV": {
          "id": "Hy4przaDV",
          "position": {
            "x": 9,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "ryZVTSM6vE": {
          "id": "ryZVTSM6vE",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        }
      },
      "path": "@/002-simulate"
    },
    "@/003-inspector": {
      "comments": {
        "SkpzuzTP4": {
          "content": "# Nodes, Pins, Inspector\n\nNow that we've seen our program in action, let's take a closer look at it and tweak it a little.\n\nThe dark gray boxes on the patch are called *nodes*. A node is a visual representation of some physical device or some function: from math and logic to more complicated stuff like producing, filtering or accumulating values, measuring time, etc.\n\nOur program consists of `clock`, `count`, and `watch` nodes. `clock` ticks at a given interval, `count` increments its value with each incoming tick, and `watch` displays the value during debug or simulation sessions.\n\nThe small colored circles on the nodes are called *pins*. They are used to transfer data between nodes. Pins are divided into inputs and outputs. Inputs are always on the top side of the nodes, outputs are on the bottom.\n\nNodes process the values from input pins and take some action or give a result. The values come to input pins from other nodes outputs through links during program execution or are constantly *bound* to pins using *Inspector* during program creation.\n\n## Exercise\n\nLet’s learn how to bind values to input pins with the Inspector pane.\n\n1. Click on the `clock` node. You will see the Inspector pane under Project Browser.\n\n2. In the Inspector, change the `IVAL` value from `1` to `0.1`.\n\nRun the simulation. Notice that the counter value increments much faster. Try to bind another value to counter’s `STEP` and see how it affects the behavior.",
          "id": "SkpzuzTP4",
          "position": {
            "x": -1,
            "y": -1,
            "units": "slots"
          },
          "size": {
            "height": 8,
            "width": 9,
            "units": "slots"
          }
        }
      },
      "links": {
        "Hkfe2DzTPE": {
          "id": "Hkfe2DzTPE",
          "input": {
            "nodeId": "H1WehvGpvV",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "H1gx3wfavN",
            "pinKey": "r1yhZRd8W"
          }
        },
        "Symg2wGaPE": {
          "id": "Symg2wGaPE",
          "input": {
            "nodeId": "H1gx3wfavN",
            "pinKey": "HJAq-A_8-"
          },
          "output": {
            "nodeId": "Syg2wfaDV",
            "pinKey": "HJU8CE2lW"
          }
        }
      },
      "nodes": {
        "H1WehvGpvV": {
          "id": "H1WehvGpvV",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "H1gx3wfavN": {
          "id": "H1gx3wfavN",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/count"
        },
        "Syg2wfaDV": {
          "boundLiterals": {
            "B13SCNhl-": "1"
          },
          "id": "Syg2wfaDV",
          "position": {
            "x": 10,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/core/clock"
        }
      },
      "path": "@/003-inspector"
    },
    "@/004-patching": {
      "comments": {
        "BJJH5p-cV": {
          "content": "## 👆 Ways to add node\n\nAlternatively to double-clicking you can also press the “I” key or hit Edit → Add Node.\n\nIf you don’t remember the name of a node, try to find it in Project Browser. Once you spot it there, drag’n’drop the item to the patch board or hit Place in its context menu.",
          "id": "BJJH5p-cV",
          "position": {
            "x": -2,
            "y": 6,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 8,
            "units": "slots"
          }
        },
        "Hy-6APFO4": {
          "content": "# Patching\n\nYou guessed correctly, you may add nodes and link them to build brand new programs and improve existing ones.\n\n## Exercise\n\nLet's extend our counting program so that we'll have two independent counters.\n\n1. Double-click on some empty space on the patch; the suggester line will appear.\n2. Start typing “clock” into it and press Enter once you see `xod/core/clock`.\n3. A new `clock` node will appear where you have double-clicked.\n4. Move the node around by dragging it.\n5. Repeat steps 1-4 to add `count` and `watch` nodes.\n6. Create a link between `clock`'s `TICK` pin and `count`'s `INC` pin by clicking on one pin, then the other.\n7. Create a link between `count`'s output pin and `watch`'s input pin.\n\nRun the simulation to see how the counters work in parallel. Try to set different `IVAL` parameters and see how it changes the behavior.",
          "id": "Hy-6APFO4",
          "position": {
            "x": -2,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 8,
            "units": "slots"
          }
        },
        "rkOBIOtO4": {
          "content": "## 👆 Copy/paste\n\nAnother way of duplicating a group of nodes and links is selecting them by drawing a frame around to select multiple nodes at once and then copy/paste using the Edit menu or keyboard shortcuts traditional for your OS.\n\nIf you draw the selection frame from left to right, a node is selected only if fits inside completely; if you draw from right to left, the nodes which intersect the frame are also selected.",
          "id": "rkOBIOtO4",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "BJ9BguYdE": {
          "id": "BJ9BguYdE",
          "input": {
            "nodeId": "HJgDCDMpPV",
            "pinKey": "HJAq-A_8-"
          },
          "output": {
            "nodeId": "ByP0vzTPE",
            "pinKey": "HJU8CE2lW"
          }
        },
        "HkGDRDG6DN": {
          "id": "HkGDRDG6DN",
          "input": {
            "nodeId": "Sk-PRvGpDV",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "HJgDCDMpPV",
            "pinKey": "r1yhZRd8W"
          }
        }
      },
      "nodes": {
        "ByP0vzTPE": {
          "id": "ByP0vzTPE",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "HJgDCDMpPV": {
          "id": "HJgDCDMpPV",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/count"
        },
        "Sk-PRvGpDV": {
          "id": "Sk-PRvGpDV",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        }
      },
      "path": "@/004-patching"
    },
    "@/005-tweaks": {
      "comments": {
        "Bk86OdKuN": {
          "content": "# Tweaks\n\nRestarting a program every time you change a value in the Inspector is inconvenient.\nWith `tweak-*` nodes, you can adjust values while the program is running.\n\nOn the current patch we added a `tweak-number` linked to `IVAL` already.\n\n## Exercise\n\nLet’s learn how to add new tweaks to your program and control them in runtime.\n\n1. Add `tweak-number` node to the patch.\n2. Link `tweak-number`'s output pin to `count`'s `STEP` pin.\n3. Start the simulation.\n4. Double click the tweak node; the text box for tweak value will focus in Inspector.\n5. Change the value to `2.0` and press Enter.\n6. Adjust the value of the tweak linked to `clock`'s `IVAL` pin.\n\nTake a note how the changes are immediately applied while you are in the simulation mode. Try some other values and see how they behave.",
          "id": "Bk86OdKuN",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 5,
            "width": 8,
            "units": "slots"
          }
        },
        "H1mAsFFdE": {
          "content": "## 👆 Save some typing\n\nUse Up/Down keyboard keys in the Inspector to adjust numeric values by 0.1. Hold Shift to adjust by 1.0.",
          "id": "H1mAsFFdE",
          "position": {
            "x": 10,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "S1m_w9GawV": {
          "id": "S1m_w9GawV",
          "input": {
            "nodeId": "H1eOP5GpPE",
            "pinKey": "HJAq-A_8-"
          },
          "output": {
            "nodeId": "SkdPczaD4",
            "pinKey": "HJU8CE2lW"
          }
        },
        "SkLFcGpDV": {
          "id": "SkLFcGpDV",
          "input": {
            "nodeId": "SkdPczaD4",
            "pinKey": "B13SCNhl-"
          },
          "output": {
            "nodeId": "r1NYczTwN",
            "pinKey": "ByfGSDjQE"
          }
        },
        "SkM_DczawE": {
          "id": "SkM_DczawE",
          "input": {
            "nodeId": "rJWuDqG6DV",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "H1eOP5GpPE",
            "pinKey": "r1yhZRd8W"
          }
        }
      },
      "nodes": {
        "H1eOP5GpPE": {
          "id": "H1eOP5GpPE",
          "position": {
            "x": 10,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/count"
        },
        "SkdPczaD4": {
          "id": "SkdPczaD4",
          "position": {
            "x": 11,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "r1NYczTwN": {
          "boundLiterals": {
            "ByfGSDjQE": "1.6"
          },
          "id": "r1NYczTwN",
          "position": {
            "x": 12,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/debug/tweak-number"
        },
        "rJWuDqG6DV": {
          "id": "rJWuDqG6DV",
          "position": {
            "x": 10,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        }
      },
      "path": "@/005-tweaks"
    },
    "@/006-help": {
      "comments": {
        "Hy25Dd0wE": {
          "content": "# Getting Help\n\nBy now you should be a bit bored by the `clock` and `counter`. XOD offers many more nodes to work with and yet more [nodes are shared by the community](https://xod.io/libs/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial) members. What a node does is described with a short annotation carried with the node. Your discovery starts with reading these descriptions.\n\n## Exercise\n\nLet's learn a few ways to see nodes’ descriptions.\n\n1. Scroll to the `xod/math` section in the Project Browser and click to expand it.\n2. Click on the `clip` patch, and then press the H key. A help box with the description will appear.\n3. Click on another patch. Help panel will move and show a description for it.\n4. Select some node on the patch board and press the H key. Quick Help panel will appear at the right side of the patch board.\n\nDiscover a few more nodes bundled within the XOD standard library.",
          "id": "Hy25Dd0wE",
          "position": {
            "x": 0,
            "y": 1,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        },
        "SycXweWYV": {
          "content": "## 👆 Help while searching\n\nAs you probably noticed from previous lessons, the help boxes also automatically appear when using Suggester.",
          "id": "SycXweWYV",
          "position": {
            "x": 8,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 7,
            "units": "slots"
          }
        },
        "rJdie0Z9E": {
          "content": "## Extra exercise\n\nUsing all the knowledge you have up to this moment, try to make a program which shows a cosine of a continuously increasing angle. Math is beautiful!",
          "id": "rJdie0Z9E",
          "position": {
            "x": 16,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "Hk6RlJWFV": {
          "id": "Hk6RlJWFV",
          "input": {
            "nodeId": "SJ-T9u0u4",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "H1qCxJbKV",
            "pinKey": "BJRURA1nW"
          }
        },
        "ryR0xyZKN": {
          "id": "ryR0xyZKN",
          "input": {
            "nodeId": "H1qCxJbKV",
            "pinKey": "Hk2H0A13-"
          },
          "output": {
            "nodeId": "SyfhqOR_4",
            "pinKey": "ByfGSDjQE"
          }
        }
      },
      "nodes": {
        "H1qCxJbKV": {
          "boundLiterals": {
            "H1WURCknW": "1",
            "Hy_U0013b": "5"
          },
          "id": "H1qCxJbKV",
          "position": {
            "x": 10,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/math/clip"
        },
        "SJ-T9u0u4": {
          "id": "SJ-T9u0u4",
          "position": {
            "x": 10,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "SyfhqOR_4": {
          "boundLiterals": {
            "ByfGSDjQE": "9"
          },
          "id": "SyfhqOR_4",
          "position": {
            "x": 10,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-number"
        }
      },
      "path": "@/006-help"
    },
    "@/007-booleans": {
      "comments": {
        "ByANvORwN": {
          "content": "# Booleans\n\nIn previous lessons we mostly dealt with numbers adjusting counter step and clock interval. Now let's talk about *booleans*. They have only who possible values:\n\n- *True* (aka logic one, high signal)\n- *False* (aka logic zero, low signal)\n\nBooleans are extremely useful and common. They may be used to indicate whether some condition is met, should a device be on or off, did some operation succeed, etc.\n\n## Exercise\n\nLet’s learn how boolean values can be combined.\n\n1. Read the descriptions for `and`, `or` and `not` nodes.\n2. Guess what the output value of `and` will be.\n3. Run the simulation to confirm it.\n4. Use `tweak-boolean` nodes to change it to the opposite value.\n\nCheck out descriptions for `nand`, `nor` and `xor` nodes. Add them onto the patch along with some additional tweaks to make a more complex processing.",
          "id": "ByANvORwN",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        },
        "SJgSLRb9V": {
          "content": "## 👆 Ladder logic\n\nIf one would use binary sensors like buttons or mechanic switches as a source of boolean values and relays instead of watches, he can use XOD to program PLC devices resembling the ladder programming which is common in industrial applications.",
          "id": "SJgSLRb9V",
          "position": {
            "x": 9,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "BJcjW7pidV": {
          "id": "BJcjW7pidV",
          "input": {
            "nodeId": "HysWmajdV",
            "pinKey": "SJMVU0urvkZ"
          },
          "output": {
            "nodeId": "B1gj-mTod4",
            "pinKey": "SJyXI0OrD1-"
          }
        },
        "BktjWXaoON": {
          "id": "BktjWXaoON",
          "input": {
            "nodeId": "B1gj-mTod4",
            "pinKey": "HJCfI0dBDkb"
          },
          "output": {
            "nodeId": "S1zibm6o_V",
            "pinKey": "Sk1e_NIVE"
          }
        },
        "H1vsZQaoO4": {
          "id": "H1vsZQaoO4",
          "input": {
            "nodeId": "B1SoZ76iuN",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "HysWmajdV",
            "pinKey": "B1gN80uHvk-"
          }
        },
        "HJIo-7TsdV": {
          "id": "HJIo-7TsdV",
          "input": {
            "nodeId": "Sy4s-76i_E",
            "pinKey": "ry3zLA_Bv1Z"
          },
          "output": {
            "nodeId": "By7i-majON",
            "pinKey": "Sk1e_NIVE"
          }
        },
        "HydjbXajuV": {
          "id": "HydjbXajuV",
          "input": {
            "nodeId": "B1gj-mTod4",
            "pinKey": "BJaG80urD1-"
          },
          "output": {
            "nodeId": "rkbi-mTouN",
            "pinKey": "Sk1e_NIVE"
          }
        },
        "rkjsZX6o_V": {
          "id": "rkjsZX6o_V",
          "input": {
            "nodeId": "HysWmajdV",
            "pinKey": "r1bVLR_BPJW"
          },
          "output": {
            "nodeId": "Sy4s-76i_E",
            "pinKey": "r1if8ROSDJ-"
          }
        }
      },
      "nodes": {
        "B1SoZ76iuN": {
          "id": "B1SoZ76iuN",
          "position": {
            "x": 10,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 4,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "B1gj-mTod4": {
          "id": "B1gj-mTod4",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/or"
        },
        "By7i-majON": {
          "id": "By7i-majON",
          "position": {
            "x": 12,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-boolean"
        },
        "HysWmajdV": {
          "id": "HysWmajdV",
          "position": {
            "x": 10,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/and"
        },
        "S1zibm6o_V": {
          "id": "S1zibm6o_V",
          "position": {
            "x": 10,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-boolean"
        },
        "Sy4s-76i_E": {
          "id": "Sy4s-76i_E",
          "position": {
            "x": 12,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/not"
        },
        "rkbi-mTouN": {
          "id": "rkbi-mTouN",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-boolean"
        }
      },
      "path": "@/007-booleans"
    },
    "@/008-variadics": {
      "comments": {
        "H19EghQpvE": {
          "content": "# Variadic Nodes\n\nCheck out the `or` node on this patch. In the previous lesson we saw that it has just two inputs, but now it has four! That's because some of the nodes in XOD are *variadic* — you can change their number of inputs.\n\nVariadic nodes can be recognized by the handle on the right side. Also, their pins are marked as “variadic” in the help panels.\n\n## Exercise\n\nLet’s learn how to adjust the number of inputs.\n\n1. Hover over the right side of the `add` node. Your cursor should become a double arrow.\n2. Click and drag to the right to add more inputs.\n3. Use the new inputs to link the “11” `tweak-number`, bind some values to others.\n\nAs you guess, `add` will sum all the inputs it got. Run the simulation to verify.",
          "id": "H19EghQpvE",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "B1RAndRO4": {
          "id": "B1RAndRO4",
          "input": {
            "nodeId": "BylRnd0_E",
            "pinKey": "HJCfI0dBDkb-$2"
          },
          "output": {
            "nodeId": "rkZOj_CuV",
            "pinKey": "Sk1e_NIVE"
          }
        },
        "BJXdQajON": {
          "id": "BJXdQajON",
          "input": {
            "nodeId": "Hysgh7pD4",
            "pinKey": "BJnQUR_BwyZ"
          },
          "output": {
            "nodeId": "HkeuXpodV",
            "pinKey": "ByfGSDjQE"
          }
        },
        "HkSCnuR_N": {
          "id": "HkSCnuR_N",
          "input": {
            "nodeId": "SyePjO0ON",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "BylRnd0_E",
            "pinKey": "SJyXI0OrD1-"
          }
        },
        "S1JSz4pD4": {
          "id": "S1JSz4pD4",
          "input": {
            "nodeId": "Hysgh7pD4",
            "pinKey": "HkqmLAOrD1W"
          },
          "output": {
            "nodeId": "rkadWN6vN",
            "pinKey": "ByfGSDjQE"
          }
        },
        "SyNChdR_E": {
          "id": "SyNChdR_E",
          "input": {
            "nodeId": "BylRnd0_E",
            "pinKey": "BJaG80urD1-"
          },
          "output": {
            "nodeId": "S1yOoOAu4",
            "pinKey": "Sk1e_NIVE"
          }
        },
        "rkL02_0OE": {
          "id": "rkL02_0OE",
          "input": {
            "nodeId": "BylRnd0_E",
            "pinKey": "HJCfI0dBDkb"
          },
          "output": {
            "nodeId": "r1x_jOC_E",
            "pinKey": "Sk1e_NIVE"
          }
        },
        "ryxbhmTwN": {
          "id": "ryxbhmTwN",
          "input": {
            "nodeId": "B1-4xh7pvV",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "Hysgh7pD4",
            "pinKey": "SyomIRurDJ-"
          }
        }
      },
      "nodes": {
        "B1-4xh7pvV": {
          "id": "B1-4xh7pvV",
          "position": {
            "x": 13,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 4,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "BJKFQao_4": {
          "boundLiterals": {
            "ByfGSDjQE": "11"
          },
          "id": "BJKFQao_4",
          "position": {
            "x": 16,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-number"
        },
        "BylRnd0_E": {
          "arityLevel": 3,
          "id": "BylRnd0_E",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/or"
        },
        "HkeuXpodV": {
          "boundLiterals": {
            "ByfGSDjQE": "42"
          },
          "id": "HkeuXpodV",
          "position": {
            "x": 13,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-number"
        },
        "Hysgh7pD4": {
          "id": "Hysgh7pD4",
          "position": {
            "x": 13,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/add"
        },
        "S1yOoOAu4": {
          "id": "S1yOoOAu4",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-boolean"
        },
        "SyePjO0ON": {
          "id": "SyePjO0ON",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "r1x_jOC_E": {
          "boundLiterals": {
            "Sk1e_NIVE": "False"
          },
          "id": "r1x_jOC_E",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-boolean"
        },
        "rkZOj_CuV": {
          "boundLiterals": {
            "Sk1e_NIVE": "True"
          },
          "id": "rkZOj_CuV",
          "position": {
            "x": 11,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-boolean"
        },
        "rkadWN6vN": {
          "boundLiterals": {
            "ByfGSDjQE": "0.5"
          },
          "id": "rkadWN6vN",
          "position": {
            "x": 14,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-number"
        }
      },
      "path": "@/008-variadics"
    },
    "@/009-pulses": {
      "comments": {
        "B1BIP_AwN": {
          "content": "# Pulses\n\nIn previous lessons, we told that the `clock` node ticks. To be more precise, the node outputs *pulses*.\n\nThis data type is very different from all the others like numbers and booleans. Values ​​in the XOD are transferred to the links continuously, even if they don’t change. They are like voltage. The pulse data type is different. Imagine something like a flash. It’s basically a message to trigger something else. It does not transmit any data. Howerver, it is useful when you need to convey that an event has occurred or tell something else to work.\n\nAnd of course, XOD offers a `tweak-pulse` node to send pulses manually during simulation.\n\n## Exercice\n\nLet’s play with pulses using `tweak-pulse`.\n\n1. Run the simulation.\n2. Select the `tweak-pulse` node.\n3. Press the “pulse” button in the Inspector; the counter will reset back to 0.\n4. Replace the `clock` node with an another `tweak-pulse` and restart the simulation.\n5. Increment the counter by manually sending pulses to `INC` pin.\n",
          "id": "B1BIP_AwN",
          "position": {
            "x": -1,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 7,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "BJdSjYQaPV": {
          "id": "BJdSjYQaPV",
          "input": {
            "nodeId": "SJxBoK7pP4",
            "pinKey": "HJAq-A_8-"
          },
          "output": {
            "nodeId": "B1BjYmTw4",
            "pinKey": "HJU8CE2lW"
          }
        },
        "HkvBsYQpPN": {
          "id": "HkvBsYQpPN",
          "input": {
            "nodeId": "SkbSsYX6PN",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "SJxBoK7pP4",
            "pinKey": "r1yhZRd8W"
          }
        },
        "rJKhKQavV": {
          "id": "rJKhKQavV",
          "input": {
            "nodeId": "SJxBoK7pP4",
            "pinKey": "SkUjZA_L-"
          },
          "output": {
            "nodeId": "S1unYQ6DE",
            "pinKey": "Bkf4BDsmV"
          }
        }
      },
      "nodes": {
        "B1BjYmTw4": {
          "id": "B1BjYmTw4",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "S1unYQ6DE": {
          "id": "S1unYQ6DE",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/tweak-pulse"
        },
        "SJxBoK7pP4": {
          "id": "SJxBoK7pP4",
          "position": {
            "x": 7,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/count"
        },
        "SkbSsYX6PN": {
          "id": "SkbSsYX6PN",
          "position": {
            "x": 7,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        }
      },
      "path": "@/009-pulses"
    },
    "@/010-flip-flop": {
      "comments": {
        "SyRmtuAw4": {
          "content": "# Flip-flops\n\nYou can control the behavior of many nodes with pulses. A very useful node is `flip-flop`. It acts like a virtual switch, whose states can be controlled by pulses. A pulse on `SET` turns the stored `MEM` value to true. `RST` resets `MEM` to false. And a pulse on `TGL` inverses the `MEM` value.\n\nThe patch shown here toggles the output boolean value each second.\n\n## Exercise\n\nLet’s experiment with the `flip-flop` node.\n\n1. Replace `clock` node with `tweak-pulse` node.\n2. Add a couple more `tweak-pulse`s and connect them to `flip-flop`'s `SET` and `RST` pins.\n3. Run the simulation, and send pulses to each pin\n\nObserve how the `MEM` value changes when sending several pulses to the same pin in a row.\n",
          "id": "SyRmtuAw4",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 5,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "HkhyP4pDV": {
          "id": "HkhyP4pDV",
          "input": {
            "nodeId": "Hys1vVpDV",
            "pinKey": "ryTIROHwkW"
          },
          "output": {
            "nodeId": "BJMpR8VTwV",
            "pinKey": "HJU8CE2lW"
          }
        },
        "SJR1PVaPV": {
          "id": "SJR1PVaPV",
          "input": {
            "nodeId": "r1baCUE6w4",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "Hys1vVpDV",
            "pinKey": "HkyxURuSPyW"
          }
        }
      },
      "nodes": {
        "BJMpR8VTwV": {
          "id": "BJMpR8VTwV",
          "position": {
            "x": 10,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "Hys1vVpDV": {
          "id": "Hys1vVpDV",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/flip-flop"
        },
        "r1baCUE6w4": {
          "id": "r1baCUE6w4",
          "position": {
            "x": 9,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        }
      },
      "path": "@/010-flip-flop"
    },
    "@/011-branching": {
      "comments": {
        "Sy45VFVpPV": {
          "content": "# Branching\n\nChoosing between values based on some condition is a common task. For this, there is an `if-else` node in `xod/core`.\n\nThe `COND` pin of this node checks the boolean input value. If `COND` receives true, the node sets the value from the `T` pin to the `R` pin. When it receives false, it sets the value from the `F` pin to the `R` pin.\n\n## Exercise\n\nLearn how `if-else` behaves.\n\n1. Run the simulation.\n2. Change the value of the `tweak-boolean` node, observe how `if-else` output chenges.\n3. Replace `tweak-boolean` with a `flop-flop` with `TGL` pin connected to a `clock`.",
          "id": "Sy45VFVpPV",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 4,
            "width": 8,
            "units": "slots"
          }
        }
      },
      "links": {
        "BkC8FNpDN": {
          "id": "BkC8FNpDN",
          "input": {
            "nodeId": "rkiIt4aP4",
            "pinKey": "HJAq-A_8-"
          },
          "output": {
            "nodeId": "rJg54K4TDN",
            "pinKey": "HJU8CE2lW"
          }
        },
        "H1WEDYE6PN": {
          "id": "H1WEDYE6PN",
          "input": {
            "nodeId": "B1gEvFVawV",
            "pinKey": "HJAq-A_8-"
          },
          "output": {
            "nodeId": "rJ4DFVpvE",
            "pinKey": "HJU8CE2lW"
          }
        },
        "HyAHYE6w4": {
          "id": "HyAHYE6w4",
          "input": {
            "nodeId": "ry9NK46v4",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "BysSt4TPE",
            "pinKey": "S13xLCuHvkW"
          }
        },
        "HyevK4TPE": {
          "id": "HyevK4TPE",
          "input": {
            "nodeId": "BysSt4TPE",
            "pinKey": "ryTeUROHD1b"
          },
          "output": {
            "nodeId": "rkiIt4aP4",
            "pinKey": "r1yhZRd8W"
          }
        },
        "S178FVaPV": {
          "id": "S178FVaPV",
          "input": {
            "nodeId": "BysSt4TPE",
            "pinKey": "S1yZIA_rDJZ"
          },
          "output": {
            "nodeId": "SkzLFNpwE",
            "pinKey": "Sk1e_NIVE"
          }
        },
        "ryIwF4pP4": {
          "id": "ryIwF4pP4",
          "input": {
            "nodeId": "BysSt4TPE",
            "pinKey": "r1AgIROHDJW"
          },
          "output": {
            "nodeId": "B1gEvFVawV",
            "pinKey": "r1yhZRd8W"
          }
        }
      },
      "nodes": {
        "B1gEvFVawV": {
          "boundLiterals": {
            "HJvqZ0dLZ": "-1"
          },
          "id": "B1gEvFVawV",
          "position": {
            "x": 15,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/count"
        },
        "BysSt4TPE": {
          "id": "BysSt4TPE",
          "position": {
            "x": 11,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/core/if-else"
        },
        "SkzLFNpwE": {
          "boundLiterals": {
            "Sk1e_NIVE": "True"
          },
          "id": "SkzLFNpwE",
          "position": {
            "x": 11,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/debug/tweak-boolean"
        },
        "rJ4DFVpvE": {
          "boundLiterals": {
            "B13SCNhl-": "2"
          },
          "id": "rJ4DFVpvE",
          "position": {
            "x": 15,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "rJg54K4TDN": {
          "boundLiterals": {
            "B13SCNhl-": "0.5"
          },
          "id": "rJg54K4TDN",
          "position": {
            "x": 12,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "rkiIt4aP4": {
          "id": "rkiIt4aP4",
          "position": {
            "x": 12,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/count"
        },
        "ry9NK46v4": {
          "id": "ry9NK46v4",
          "position": {
            "x": 11,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 3,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        }
      },
      "path": "@/011-branching"
    },
    "@/012-strings": {
      "comments": {
        "BkFwA0Z9V": {
          "content": "## 👆 Generics\n\nNote, the `if-else` node can work with numbers *or* strings depending on the incoming value type. The pins which accept various types are called *generic*. You can spot them by the little dot in the center.\n\nIf you want to bind a string value to a generic pin, you should enquote it because the number `3.14` and the string `\"3.14\"` are different things. The quotes explicitly tell XOD you’ve meant a string value.",
          "id": "BkFwA0Z9V",
          "position": {
            "x": 14,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 7,
            "units": "slots"
          }
        },
        "H12oaYV6PN": {
          "content": "# Strings\n\nAnother important data type is a *string*. Strings represent pieces of text like “Hello World!” or \"[https://xod.io](https://xod.io/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial)\". XOD depicts the string type in yellow.\n\nTweak nodes for strings are a bit special. For optimisation purposes XOD needs to know the maximum length of the tweaked string, so there are several ones available. When you want to add a string tweak, choose the smallest one necessary.\n\nThe standard library contains a few nodes to work with strings and text. One useful node is `concat`. It joins several parts into a single one. This allows creating a message out of several data sources.\n\n## Exercise\n\nTry strings in runtime.\n\n1. Run the Simulation.\n2. Observe how the message alternates between \"Hello World\" and \"Hello XOD\".\n3. Change values of `tweak-string-16`s to change the message.\n4. Add a third pin to `concat` and bind an exclamation point to it.",
          "id": "H12oaYV6PN",
          "position": {
            "x": 0,
            "y": 1,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "ByE2GGWKV": {
          "id": "ByE2GGWKV",
          "input": {
            "nodeId": "H1f3GfWFV",
            "pinKey": "BkeKcj6ZZ"
          },
          "output": {
            "nodeId": "SyZoTKVpDN",
            "pinKey": "S13xLCuHvkW"
          }
        },
        "HypAY46v4": {
          "id": "HypAY46v4",
          "input": {
            "nodeId": "Bkh0FNTDV",
            "pinKey": "ryTIROHwkW"
          },
          "output": {
            "nodeId": "rklsaYEpPN",
            "pinKey": "HJU8CE2lW"
          }
        },
        "SyOurBRD4": {
          "id": "SyOurBRD4",
          "input": {
            "nodeId": "SyZoTKVpDN",
            "pinKey": "r1AgIROHDJW"
          },
          "output": {
            "nodeId": "S15HrHRDE",
            "pinKey": "H1wh06BEV"
          }
        },
        "r1DOBHRDE": {
          "id": "r1DOBHRDE",
          "input": {
            "nodeId": "SyZoTKVpDN",
            "pinKey": "ryTeUROHD1b"
          },
          "output": {
            "nodeId": "rJVSrHCwN",
            "pinKey": "H1wh06BEV"
          }
        },
        "rJHnGfbYN": {
          "id": "rJHnGfbYN",
          "input": {
            "nodeId": "Hyi6FEpPV",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "H1f3GfWFV",
            "pinKey": "rksccsp-W"
          }
        },
        "rkZJ5VavV": {
          "id": "rkZJ5VavV",
          "input": {
            "nodeId": "SyZoTKVpDN",
            "pinKey": "S1yZIA_rDJZ"
          },
          "output": {
            "nodeId": "Bkh0FNTDV",
            "pinKey": "HkyxURuSPyW"
          }
        }
      },
      "nodes": {
        "Bkh0FNTDV": {
          "id": "Bkh0FNTDV",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/flip-flop"
        },
        "H1f3GfWFV": {
          "boundLiterals": {
            "Hkqu9oaWb": "\"Hello \""
          },
          "id": "H1f3GfWFV",
          "position": {
            "x": 9,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/core/concat"
        },
        "Hyi6FEpPV": {
          "id": "Hyi6FEpPV",
          "position": {
            "x": 9,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 4,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "S15HrHRDE": {
          "boundLiterals": {
            "H1wh06BEV": "\"World\""
          },
          "id": "S15HrHRDE",
          "position": {
            "x": 14,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/tweak-string-16"
        },
        "SyZoTKVpDN": {
          "id": "SyZoTKVpDN",
          "position": {
            "x": 10,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/if-else"
        },
        "rJVSrHCwN": {
          "boundLiterals": {
            "H1wh06BEV": "\"XOD\""
          },
          "id": "rJVSrHCwN",
          "position": {
            "x": 13,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/tweak-string-16"
        },
        "rklsaYEpPN": {
          "boundLiterals": {
            "B13SCNhl-": "1"
          },
          "id": "rklsaYEpPN",
          "position": {
            "x": 10,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        }
      },
      "path": "@/012-strings"
    },
    "@/100-hardware": {
      "comments": {
        "S1x6FBAP4": {
          "content": "# Working with Hardware\n\nIn this part of the tutorial, you will learn how to upload programs to your Arduino (or compatible) controller board and work with hardware modules.\n\nTo upload programs to Arduino, you need to [install the desktop version](https://xod.io/downloads/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial) of XOD. The browser version does not have enough permissions to access USB ports. Nevertheless, you can upload XOD programs even from the browser version if you have the original Arduino IDE installed by copying and pasting the generated code.\n\nIf you have no hardware on hand, don’t give up. Skip to the `200-patterns` part and go on replacing hardware nodes with `watch`es and `tweak`s.",
          "id": "S1x6FBAP4",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 4,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "path": "@/100-hardware"
    },
    "@/101-upload": {
      "comments": {
        "SkxcsVCvV": {
          "content": "# Uploading Programs\n\nTo make a program work XOD converts it to C++ code, then compiles it to a binary firmware compatible with the board of choice, then pushes the binary to the board itself.\n\nThe process is automated and runs behind the scenes once you hit “Upload”. However, many tools are involved and the initial XOD IDE installation can lack some of them. When you upload to a new kind of a board for the first time, a message will appear asking to Download & Install required tools. Confirm to setup them automatically. Keep in mind, it can consume 200 MB or so of Internet traffic and take up a few minutes.\n\n## Exercise\n\nLet's upload this patch to the Arduino board to see the built-in LED blinking.\n\n1. Connect the Arduino board to your computer with a USB cable.\n2. Upload the program. To do this, hit Deploy → Upload to Arduino from the main menu.\n3. If some tools are missing, confirm the installation by clicking Download & Install in the message appeared.\n\nSee the on-board LED usually marked with the `L` letter blinking.\n\nChange the `IVAL` value on the `clock` node and upload the program again. See how the blinking frequency of the LED changes.",
          "id": "SkxcsVCvV",
          "position": {
            "x": -2,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 7,
            "width": 7,
            "units": "slots"
          }
        },
        "rysUAJz5N": {
          "content": "## 👆 Shortcut\n\nYou can click the button with a lightning icon in the deployment pane at the bottom of the screen instead of using the main menu.",
          "id": "rysUAJz5N",
          "position": {
            "x": 6,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 6,
            "units": "slots"
          }
        }
      },
      "links": {
        "B16rcECPN": {
          "id": "B16rcECPN",
          "input": {
            "nodeId": "H1iH5ERv4",
            "pinKey": "ryTIROHwkW"
          },
          "output": {
            "nodeId": "B1dBcNADN",
            "pinKey": "HJU8CE2lW"
          }
        },
        "BkgLcN0vV": {
          "id": "BkgLcN0vV",
          "input": {
            "nodeId": "HJyLcNCvV",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "H1iH5ERv4",
            "pinKey": "HkyxURuSPyW"
          }
        }
      },
      "nodes": {
        "B1dBcNADN": {
          "id": "B1dBcNADN",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "H1iH5ERv4": {
          "id": "H1iH5ERv4",
          "position": {
            "x": 7,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/flip-flop"
        },
        "HJyLcNCvV": {
          "boundLiterals": {
            "B1oqkTnIb": "D13"
          },
          "id": "HJyLcNCvV",
          "position": {
            "x": 6,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        }
      },
      "path": "@/101-upload"
    },
    "@/102-interactive": {
      "comments": {
        "Bk5hgeM54": {
          "content": "## Debug protocol\n\nDuring interactive sessions XOD IDE and the board keep connection open and exchange with messages about value changes. These message are simple plain-text lines and you can see them in the Serial tab of the Deployment pane.\n\nClick the funnel icon and make sure “Watched Values” is checked. To echo the messages to the log.",
          "id": "Bk5hgeM54",
          "position": {
            "x": 8,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 6,
            "units": "slots"
          }
        },
        "H1kTkgf9N": {
          "content": "## 👆 Shortcut\n\nClick the button with a bug icon in the deployment pane below. To quickly access the upload dialog with “Debug after upload” checked.",
          "id": "H1kTkgf9N",
          "position": {
            "x": 0,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 6,
            "units": "slots"
          }
        },
        "Syx5p6EAv4": {
          "content": "# Interactive Session\n\nAs you run the simulation, you can run an *interactive session* on the board also known as debugger. Tweaks and watches go live while running the program on physical hardware.\n\n## Exercise\n\nLet’s control our LED in real time.\n\n1. Connect the Arduino board to your computer.\n\n2. Upload the program with the interactive session enabled: hit Deploy → Upload to Arduino and check \"Debug after upload\".\n\n3. Once the interactive session has been started, select `tweak-boolean` and change its value; see how the built-in LED on the board reacts to these changes.\n\nTo stop the interactive session press \"Stop\" button on the green panel above. To start the interactive session again, you have to re-upload the program.",
          "id": "Syx5p6EAv4",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 5,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "rkLIoHAPE": {
          "id": "rkLIoHAPE",
          "input": {
            "nodeId": "r1ZP7AE0DN",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "SJ78sSRPV",
            "pinKey": "Sk1e_NIVE"
          }
        }
      },
      "nodes": {
        "SJ78sSRPV": {
          "id": "SJ78sSRPV",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/tweak-boolean"
        },
        "r1ZP7AE0DN": {
          "boundLiterals": {
            "B1oqkTnIb": "D13"
          },
          "id": "r1ZP7AE0DN",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        }
      },
      "path": "@/102-interactive"
    },
    "@/103-led": {
      "comments": {
        "BJfDq3B0DE": {
          "content": "# LED Node\n\nYou already made a blinking LED and controlled it in the interactive session. But you have only feed it with the values of true and false. The false value auto-converts to 0 and represents no glow at all, whereas the true value converts to 1 and denotes the full brightness.\n\nYou can also set an intermediate brightness level by setting values *between* 0 and 1.\n\n## Exercise\n\nLet’s fine-tune LED brightness.\n\n1. Assemble a circuit according to the [scheme](https://xod.io/docs/tutorial/103-led/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#circuit), and connect the board to your computer.\n\n2. Set the value of the `PORT` pin to `D11`. Leading \"D\" means that it's a digital port.\n\n3. Replace the `tweak-boolean` node with `tweak-number`.\n\n4. Upload the program with the interactive session enabled.\n\n5. Change the value of `tweak-number` in the range from 0 to 1 and see how the brightness of the LED changes.",
          "id": "BJfDq3B0DE",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        },
        "rkpiXeMqE": {
          "content": "## 👆 PWM feature\n\nAn LED can change the brightness only if connected to a board pin which supports PWM. If you have an Arduino board, find out the port number with the leading \"~\" symbol.\n\nMany board models have no PWM on D13, so we wire the LED to another pin.",
          "id": "rkpiXeMqE",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "BybD5nH0wN": {
          "id": "BybD5nH0wN",
          "input": {
            "nodeId": "Byw5hBADE",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "B1xDqnBCvV",
            "pinKey": "Sk1e_NIVE"
          }
        }
      },
      "nodes": {
        "B1xDqnBCvV": {
          "id": "B1xDqnBCvV",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-boolean"
        },
        "Byw5hBADE": {
          "boundLiterals": {
            "B1oqkTnIb": "D13"
          },
          "id": "Byw5hBADE",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        }
      },
      "path": "@/103-led"
    },
    "@/104-button": {
      "comments": {
        "HJzSJTKCwV": {
          "content": "# Buttons\n\nHere is a `button` node from `xod/common-hardware`.\n\nTake a look at button outputs. It has a `PRS` pin, which is true whenever it is pressed. And `DONE` pin, which pulses when reading is done, wherever the button is pressed or not.\n\nThis is a standard idiom for side-effect nodes representing hardware or, for example, the Internet.\n\n## Exercise\n\nLet's make the LED glow while the button is pressed.\n\n1. Assemble the [circuit with a button and LED](https://xod.io/docs/tutorial/104-button/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#circuit).\n2. Set the `PORT` value of the `button` node.\n3. Link `PRS` to `LUM`.\n4. Upload your patch.\n\nHold the button to turn the LED on.",
          "id": "HJzSJTKCwV",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        },
        "r1Ha3O1ON": {
          "content": "## Additional exercise\n\nPlace the already familiar node `flip-flop` between `button` and `led` to switch the LED on or off on each press.",
          "id": "r1Ha3O1ON",
          "position": {
            "x": 13,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 5,
            "units": "slots"
          }
        }
      },
      "links": {
        "SJTd6_J_N": {
          "id": "SJTd6_J_N",
          "input": {
            "nodeId": "Hyn_aukuV",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "ryITdiRwN",
            "pinKey": "BJ--G1tI-"
          }
        }
      },
      "nodes": {
        "Hyn_aukuV": {
          "id": "Hyn_aukuV",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "S1Sbc50w4": {
          "boundLiterals": {
            "B1oqkTnIb": "D11"
          },
          "id": "S1Sbc50w4",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        },
        "ryITdiRwN": {
          "id": "ryITdiRwN",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/button"
        }
      },
      "path": "@/104-button"
    },
    "@/105-pot": {
      "comments": {
        "ryWrUpd1uN": {
          "content": "# Potentiometer\n\nThe potentiometer reads an analog value from the hardware port and outputs a normalized result in the range from `0.0` to `1.0`, depending on the angle of the knob.\n\nIt brings an easy solution to control LEDs, servos, and system coefficients.\n\n## Exercise\n\nLet's control the brightness of the LED with a potentiometer.\n\n1. Connect a potentiometer to the Arduino  board according to the [scheme](https://xod.io/docs/tutorial/105-pot/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#circuit).\n\n2. Set the `PORT` pin value on the `pot` node to `A0` because it’s connected to the analog board port A0.\n\n3. Link the `pot` node `VAL` pin to the `LUM` pin on the `led` node.\n\n4. Upload your patch.\n\nRotate the knob and see how the LED reacts to it. Cool, eh?",
          "id": "ryWrUpd1uN",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 5,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "SJXRYJZOV": {
          "id": "SJXRYJZOV",
          "input": {
            "nodeId": "HkETeKkO4",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "SyZzltkdE",
            "pinKey": "H1sM2A12-"
          }
        }
      },
      "nodes": {
        "HJBU6_1uV": {
          "boundLiterals": {
            "B1oqkTnIb": "D11"
          },
          "id": "HJBU6_1uV",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        },
        "HkETeKkO4": {
          "id": "HkETeKkO4",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "SyZzltkdE": {
          "boundLiterals": {
            "Hkry2AJhW": "A9"
          },
          "id": "SyZzltkdE",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/pot"
        }
      },
      "path": "@/105-pot"
    },
    "@/106-servo": {
      "comments": {
        "BJcJOxG5E": {
          "content": "## 👆 Motors are power hogs\n\nIf you wiggle the potentiometer fast enough you can encounter board reboots. It is because motors consume a lot of power when accelerate and if powered from the same power line as the microcontroller, the latter is left with no power at all.\n\nTo fight the effect in hardware, decouple digital parts of the circuit with capacitors and DC/DC converters. Use efficient power supplies along with (or instead of) your PC USB.\n\nTo deal with it in software, start and stop motors slowly. `206-fade` gives one possible way to acheive it.",
          "id": "BJcJOxG5E",
          "position": {
            "x": 13,
            "y": 1,
            "units": "slots"
          },
          "size": {
            "height": 4,
            "width": 6,
            "units": "slots"
          }
        },
        "HymTfYNZ_N": {
          "content": "# Servo\n\nControlling servos in XOD is just as easy as controlling LEDs. There is a node called `servo`. Find it in `xod-dev/servo`.\n\nThe `servo` node accepts a number in the range from 0.0 to 1.0 and maps it to the rated arm rotation limits of the servo motor.\n\n## Exercise\n\nLet's link `pot` with `servo` to control the servo angle with the potentiometer.\n\n1. Connect a servo to the Arduino board as shown on the [scheme](https://xod.io/docs/tutorial/106-servo/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#circuit).\n\n2. Link the `VAL` pin of the `pot` node to the `VAL` pin of the `servo` node.\n\n3. Upload the patch to the board.\n\nTurn the potentiometer knob, and watch the servo turns.\n",
          "id": "HymTfYNZ_N",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 5,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "BkfaMKVZOE": {
          "id": "BkfaMKVZOE",
          "input": {
            "nodeId": "HybpMFEWuE",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "Ske6MK4-uV",
            "pinKey": "H1sM2A12-"
          }
        },
        "r1X5wxMqN": {
          "id": "r1X5wxMqN",
          "input": {
            "nodeId": "SyN7WQRKV",
            "pinKey": "Bk5lexBtE"
          },
          "output": {
            "nodeId": "r1b5Dlz5E",
            "pinKey": "ByfGSDjQE"
          }
        }
      },
      "nodes": {
        "HybpMFEWuE": {
          "id": "HybpMFEWuE",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "Ske6MK4-uV": {
          "id": "Ske6MK4-uV",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/pot"
        },
        "SyN7WQRKV": {
          "boundLiterals": {
            "BkXK1eBYV": "D9"
          },
          "id": "SyN7WQRKV",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod-dev/servo/servo"
        },
        "r1b5Dlz5E": {
          "boundLiterals": {
            "ByfGSDjQE": "0.5"
          },
          "id": "r1b5Dlz5E",
          "position": {
            "x": 9,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/debug/tweak-number"
        }
      },
      "path": "@/106-servo"
    },
    "@/107-manipulator": {
      "comments": {
        "Hk40r24-_N": {
          "content": "# Manipulator\n\nControlling the servo with a potentiometer or another analog sensor is easy. However, what if we want to make some complex movements with servos?\n\nOn the patch board, you see `servo-device`. This node defines a servo for the further usage: the port, minimum, and maximum pulse widths which correspond to the operating limits of the servo.\n\nThe `servo-device` node links to nodes that work with servos: `rotate-slow` in this example. The `rotate-slow` node rotates the servo to the angle specified in `VAL` with the `RATE` speed when a `DO` pulse is received. You may chain these nodes to make a sequential movement.\n\nYou may notice that `rotate-slow` have `MUX` pins. It's another custom type called `mutex` that allows only one node to act at the same time.\n\nThis program rotates the servo to the maximum angle slowly and then turn it back twice as fast on a button press. The button is ignored until rotation completes.\n\nUpload the program and check it out.\n\n## Exercise\n\nLet's change the servo trajectory.\n\n1. Add two more `rotate-slow` nodes.\n2. Link all nodes in the same way.\n3. Adjust pin values of `rotate-slow`.\n4. Upload the program.\n\nPress the button and see how the servo fulfills your order.",
          "id": "Hk40r24-_N",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 8,
            "width": 8,
            "units": "slots"
          }
        },
        "SyhsB70YV": {
          "content": "## 👆 Simple nodes vs device nodes\n\nThe `xod-dev/servo` library also contains a `rotate` node. The main difference between it and `rotate-slow` that it rotates the servo immediately ignoring `MUX`.\n\nAnd if you wonder how the simple `servo` node used in the previous chapter works: under the hood, it is a trivial composition of `servo-device` and `rotate` with a few terminals exposed to you. Simple nodes (also known as quickstart nodes) are enough for basic applications and when you need more, you use raw device nodes along with action nodes like you do in this chapter.\n\nThis idiom is applicable to other hardware as well.",
          "id": "SyhsB70YV",
          "position": {
            "x": 17,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 4,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "HkvZIeXCKV": {
          "id": "HkvZIeXCKV",
          "input": {
            "nodeId": "B17bLx70Y4",
            "pinKey": "r11svP4H4"
          },
          "output": {
            "nodeId": "ByM-LgQ0FV",
            "pinKey": "ryCUDDES4"
          }
        },
        "S15ZIemRtV": {
          "id": "S15ZIemRtV",
          "input": {
            "nodeId": "ByM-LgQ0FV",
            "pinKey": "r11svP4H4"
          },
          "output": {
            "nodeId": "B1Z8gQAYE",
            "pinKey": "BJ--G1tI-"
          }
        },
        "SJIZ8lmRYN": {
          "id": "SJIZ8lmRYN",
          "input": {
            "nodeId": "B17bLx70Y4",
            "pinKey": "SkC4wvEr4"
          },
          "output": {
            "nodeId": "ByM-LgQ0FV",
            "pinKey": "HJuBDDNSV"
          }
        },
        "rJBIxQRKE": {
          "id": "rJBIxQRKE",
          "input": {
            "nodeId": "ByM-LgQ0FV",
            "pinKey": "SkC4wvEr4"
          },
          "output": {
            "nodeId": "SJ7d0fRFV",
            "pinKey": "HJmZvD4SE"
          }
        },
        "rJR-UlX0K4": {
          "id": "rJR-UlX0K4",
          "input": {
            "nodeId": "B17bLx70Y4",
            "pinKey": "Sykbxl5Y4"
          },
          "output": {
            "nodeId": "ByM-LgQ0FV",
            "pinKey": "HJIWegcFE"
          }
        }
      },
      "nodes": {
        "B17bLx70Y4": {
          "boundLiterals": {
            "HkvdPw4S4": "0",
            "S1n9Yv4r4": "0.6"
          },
          "id": "B17bLx70Y4",
          "position": {
            "x": 10,
            "y": 3,
            "units": "slots"
          },
          "type": "xod-dev/servo/rotate-slow"
        },
        "B1Z8gQAYE": {
          "boundLiterals": {
            "ByNiWkt8Z": "D13"
          },
          "id": "B1Z8gQAYE",
          "position": {
            "x": 14,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/button"
        },
        "ByM-LgQ0FV": {
          "boundLiterals": {
            "HkvdPw4S4": "1",
            "S1n9Yv4r4": "0.3",
            "r11svP4H4": "On Boot"
          },
          "id": "ByM-LgQ0FV",
          "position": {
            "x": 10,
            "y": 2,
            "units": "slots"
          },
          "type": "xod-dev/servo/rotate-slow"
        },
        "SJ7d0fRFV": {
          "boundLiterals": {
            "HyNOLPVB4": "D9"
          },
          "id": "SJ7d0fRFV",
          "position": {
            "x": 10,
            "y": 1,
            "units": "slots"
          },
          "type": "xod-dev/servo/servo-device"
        }
      },
      "path": "@/107-manipulator"
    },
    "@/108-text-lcd": {
      "comments": {
        "By72G_HbdN": {
          "content": "# Display Text on LCD\n\nThere are many variants of liquid crystal displays (LCD). Among them, text displays are simplest to communicate with. A text LCD can expose either of physical interfaces:\n\n- I2C\n- Parallel\n\nXOD supports both.\n\n## Exercise\n\nLet’s show some text on an LCD.\n\n1. Examine your LCD and decide which node fits it. Remove another one.\n2. Assemble the [circuit](https://xod.io/docs/tutorial/108-text-lcd/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#circuit) that matches your LCD model.\n3. Bind pins or set the I2C address.\n4. Bind \"Wuzzup!\" to the `L1` pin.\n5. Link `tweak-string` with `L2`.\n6. Upload the patch with the interactive session enabled.\n7. Select `tweak-string`.\n8. Type some text and press the Enter key.",
          "id": "By72G_HbdN",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        },
        "H1UzTgf9N": {
          "content": "## 👆 Too many variations\n\nThe world of text LCDs is too wide to guess your LCD pinout and parameters. The provided circuit will work for some models, but not for others. Refer to your particular display documentation to precisely determine its address, data pinout, contrast pin wiring, digital and backlight powering scheme.\n\nFor the rest of the tutorial we assume you have an I²C LCD listening on 27h address. Adjust patches accordingly if you’ve got another model.",
          "id": "H1UzTgf9N",
          "position": {
            "x": 18,
            "y": 2,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "nodes": {
        "BJ0UOrbdE": {
          "boundLiterals": {
            "B1TSE9tZ-": "\"Hello\"",
            "BJJqaX4Gb": "D11",
            "H1bLN9F-b": "\"World\"",
            "HJysTXVMb": "D9",
            "S1nqa7NMZ": "D10",
            "SkBK6Q4fb": "D12",
            "rJlYT7EfW": "D13",
            "rkbjp7Ezb": "D8"
          },
          "id": "BJ0UOrbdE",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/common-hardware/text-lcd-16x2"
        },
        "HkL8cbZFV": {
          "id": "HkL8cbZFV",
          "position": {
            "x": 15,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/tweak-string-16"
        },
        "rJWvOSbuN": {
          "boundLiterals": {
            "B1TSE9tZ-": "\"Hello\"",
            "H1bLN9F-b": "\"World\""
          },
          "id": "rJWvOSbuN",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/common-hardware/text-lcd-16x2-i2c"
        }
      },
      "path": "@/108-text-lcd"
    },
    "@/109-thermometer": {
      "comments": {
        "BykL9xbYV": {
          "content": "## 👆 Output formatting\n\nYou can convert Celsius to Fahrenheit using `xod/units/c-to-f` node.\n\nMoreover, you can add a `concat` node and show the temperature on the display like \"22C\" instead of a plain number. See `210-string-formatting` for more details.",
          "id": "BykL9xbYV",
          "position": {
            "x": 14,
            "y": 1,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 6,
            "units": "slots"
          }
        },
        "ryQEf7FyO4": {
          "content": "# Thermometer\n\nWhat if you need to control the ambient air temperature?\n\nA popular chip to measure temperature is TMP36 thermometer. XOD has a node `thermometer-tmp36` for this IC in `xod/common-hardware`. It outputs the temperature in degrees Celsius.\n\n## Exercise\n\nShowing static text on the LCD is boring. So let's make a smarter device and show the temperature on the LCD.\n\n1. Add a thermometer to your [circuit as shown](https://xod.io/docs/tutorial/109-thermometer/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#circuit).\n\n2. Ensure the correct `PORT` for the `thermometer-tmp36` node.\n\n3. Link `Tc` of `thermometer-tmp36` with `L1` of `text-lcd-16x2-i2c`.\n\n4. Upload your patch.\n\nNow you have a portable thermometer.",
          "id": "ryQEf7FyO4",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 5,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "SyZtEYkOE": {
          "id": "SyZtEYkOE",
          "input": {
            "nodeId": "SJOT7K1dE",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "SJm37Fkd4",
            "pinKey": "rkFgMITM-"
          }
        }
      },
      "nodes": {
        "BJoArYJON": {
          "id": "BJoArYJON",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/common-hardware/text-lcd-16x2-i2c"
        },
        "SJOT7K1dE": {
          "id": "SJOT7K1dE",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "SJm37Fkd4": {
          "boundLiterals": {
            "H1s0WI6MZ": "A1"
          },
          "id": "SJm37Fkd4",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/thermometer-tmp36"
        }
      },
      "path": "@/109-thermometer"
    },
    "@/110-ldr": {
      "comments": {
        "S1GHxUKyON": {
          "content": "# Ambient Light Sensor\n\nLet’s introduce a new sensor to measure the ambient light level. A photoresistor (aka light dependent resistor or LDR) will do a great job of measuring the parameter. However, there is a small problem: we do not have a photoresistor node in XOD.\n\nWe have basic nodes for working with digital and analog ports though. The photoresistor is a pretty primitive device, and all we need to do is read its value from the analog port. To do so, use an `analog-sensor` node.\n\n## Exercise\n\nLet’s make a smart (or dumb) light bulb.\n\n1. Assemble the [circuit with an LDR and LED](https://xod.io/docs/tutorial/110-ldr/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#circuit).\n\n2. Link the `VAL` output pin of the `analog-sensor` node to the `LUM` pin of the `led` node.\n\n3. Upload the patch to the board.\n\nCover the photoresistor with your hand and watch how the brightness of the LED changes.",
          "id": "S1GHxUKyON",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "S19OIF1dV": {
          "id": "S19OIF1dV",
          "input": {
            "nodeId": "S1v_8tJ_N",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "SkSOIt1ON",
            "pinKey": "BkoeN9Ay7"
          }
        }
      },
      "nodes": {
        "S1v_8tJ_N": {
          "id": "S1v_8tJ_N",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "SkSOIt1ON": {
          "id": "SkSOIt1ON",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/analog-sensor"
        },
        "rJJbwKy_E": {
          "id": "rJJbwKy_E",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        }
      },
      "path": "@/110-ldr"
    },
    "@/200-patterns": {
      "comments": {
        "H1ILK61_E": {
          "content": "# Patterns\n\nIn this part of the tutorial you meet the most popular and useful patterns of doing something more complex than a blinking LED. Learn how to deal with loops, keep and change state, make smooth transitions and so on.\n\nThis part of the tutorial is a handbook that can be useful for your projects in the future. So don't be shy to come back.",
          "id": "H1ILK61_E",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "path": "@/200-patterns"
    },
    "@/201-matching-ranges": {
      "comments": {
        "Hy7-DWAyuV": {
          "content": "## Clipping ranges\n\nThe `map` node will now linearly map the 20–50 °C range to 0–90°. Let’s raise the sensitivity. Say, we want to map 15–30 °C to 0–90° rotation.\n\nWhat happens if the `X` pin of the `map` receives data that is outside the input range (10 or 42, for example)? The output value which is the servo angle proportionally falls outside the desired range too.\n\nFor such cases, there is a sibling node called `map-clip`. It works the same way, but any input that is out of the range rounds to the nearest limit. Thus, if `X` receives the value of 10, the `map-clip` node accepts it as 15, and 42 as 30.\n\n## Extra exercise\n\nReplace the `map` node with `map-clip` and try the out-of-range values.\n\nReplace the thermometer with `analog-sensor` for LDR and play with values.\n\nDraw a gauge on the paper and attach it to the servo.",
          "id": "Hy7-DWAyuV",
          "position": {
            "x": 15,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 7,
            "width": 5,
            "units": "slots"
          }
        },
        "rJGWw-CJdE": {
          "content": "# Matching Ranges\n\nIf you have finished `109-thermometer`, you have noticed that the thermometer node outputs the temperature value to the `Tc` pin in degrees Celsius.\n\nThe practical task is to make the servo rotate smoothly from 0 to 90°, reflecting a temperature change from 20 °C to 50 °C.\n\nThe `servo` node can work only with values ranging from 0 to 1. You can match the ranges using a few math nodes, but XOD gives a special node for such cases. This node is called `map`.\n\n## Exercise\n\nMake a device which shows the temperature with an arrow glued to the servo shaft.\n\n1. Connect a TMP36 thermometer to the board as shown on the [scheme](https://xod.io/docs/tutorial/201-matching-ranges/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#circuit).\n\n2. Link the `Tc` pin to the `X` pin on the `map` node.\n\n3. Define the input range: open the Inspector for `map`, and then set `Smin` to 20 and `Smax` to 50.\n\n4. Define the output range: set the `Tmin` to 0 and `Tmax` to 0.5 (which corresponds to ~90°).\n\n5. Link the `Xm` output to the `VAL` servo input.\n\nTry to heat the thermometer with a hot object (e.g., a paper knife heated with a lighter). At the temperature of 35 °C (half the input range), the servo should rotate to 45°, which is the midpoint of the output range.",
          "id": "rJGWw-CJdE",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 8,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "ByKdDmf9V": {
          "id": "ByKdDmf9V",
          "input": {
            "nodeId": "r1Zdv7z94",
            "pinKey": "Bk5lexBtE"
          },
          "output": {
            "nodeId": "H1zoryb_E",
            "pinKey": "H12bIR_SPyZ"
          }
        },
        "HJFADybON": {
          "id": "HJFADybON",
          "input": {
            "nodeId": "BysnwJ-dN",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "H1zoryb_E",
            "pinKey": "H12bIR_SPyZ"
          }
        },
        "HyOkUyWdV": {
          "id": "HyOkUyWdV",
          "input": {
            "nodeId": "H1zoryb_E",
            "pinKey": "BJlzICOSv1-"
          },
          "output": {
            "nodeId": "Hy6crJbuE",
            "pinKey": "rkFgMITM-"
          }
        }
      },
      "nodes": {
        "BysnwJ-dN": {
          "id": "BysnwJ-dN",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "H1zoryb_E": {
          "boundLiterals": {
            "HJCWLAdSwyW": "30",
            "rkpbU0OrwyZ": "1",
            "ry1z8CuBDy-": "15"
          },
          "id": "H1zoryb_E",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/math/map"
        },
        "Hy6crJbuE": {
          "boundLiterals": {
            "H1s0WI6MZ": "A1"
          },
          "id": "Hy6crJbuE",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/thermometer-tmp36"
        },
        "r1Zdv7z94": {
          "boundLiterals": {
            "BkXK1eBYV": "D9"
          },
          "id": "r1Zdv7z94",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod-dev/servo/servo"
        }
      },
      "path": "@/201-matching-ranges"
    },
    "@/202-alarm": {
      "comments": {
        "rJIJ_OybOE": {
          "content": "# Alarm\n\nHere is the program of a simple alarm device, which turns the LED on when the temperature gets higher than the desired value.\n\nAs you can note, we use the `greater` node, one of the comparison nodes from the XOD standard library.\n\n## Exercise\n\nChange the logic to make the alarm working whenever the temperature gets *lower* than the threshold. Let the user to set this value using a potentiometer.\n\n1. Replace the `greater` node with `less`.\n\n2. Place the `map` node and bind values to map 0.0...1.0 range to 15...30 degrees Celsius.\n\n3. Place `pot` and bind the corresponding `PORT`.\n\n4. Link `pot`, `map`, and `less` nodes.\n\n5. Upload the program.\n\nRotate the potentiometer knob to set the threshold. Heat and cool down the thermometer to see how it works.",
          "id": "rJIJ_OybOE",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        },
        "rJp5G-G5E": {
          "content": "## Additional exercise\n\nUse both `greater` and `less` nodes to alarm only when the temperature is out of the range. Hint: you need the `or` node.",
          "id": "rJp5G-G5E",
          "position": {
            "x": 9,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "B1tsKyWdV": {
          "id": "B1tsKyWdV",
          "input": {
            "nodeId": "SyOoFJZuV",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "rkn_YJWOE",
            "pinKey": "B19RYS3lW"
          }
        },
        "BJNKsPqdE": {
          "id": "BJNKsPqdE",
          "input": {
            "nodeId": "rkn_YJWOE",
            "pinKey": "rJg00Nhe-"
          },
          "output": {
            "nodeId": "Bk1uu1bO4",
            "pinKey": "rkFgMITM-"
          }
        },
        "BkitKkbdE": {
          "id": "BkitKkbdE",
          "input": {
            "nodeId": "HkFtYJb_N",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "rkn_YJWOE",
            "pinKey": "B19RYS3lW"
          }
        }
      },
      "nodes": {
        "Bk1uu1bO4": {
          "boundLiterals": {
            "H1s0WI6MZ": "A1"
          },
          "id": "Bk1uu1bO4",
          "position": {
            "x": 10,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/common-hardware/thermometer-tmp36"
        },
        "HkFtYJb_N": {
          "boundLiterals": {
            "B1oqkTnIb": "D11"
          },
          "id": "HkFtYJb_N",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        },
        "SyOoFJZuV": {
          "id": "SyOoFJZuV",
          "position": {
            "x": 13,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "rkn_YJWOE": {
          "boundLiterals": {
            "HJbACN3gb": "30"
          },
          "id": "rkn_YJWOE",
          "position": {
            "x": 10,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/greater"
        }
      },
      "path": "@/202-alarm"
    },
    "@/203-permanent-alarm": {
      "comments": {
        "By-2_Dz_V": {
          "content": "# Permanent Alarm\n\nLet's extend the alarm device and make the LED stay enabled after trigerring even after the condition is no longer met. This is useful to signalize that something gone wrong even if it was not observed immediatelly.\n\nWhen the value gets out of the range, the `or` node sends a pulse to the `SET` pin of the `flip-flop` node. So `MEM` returns `True` until we reset it, toggle it, or reboot the board.\n\n## Instructions\n\nLet's make the alarm resettable.\n\n1. Add a `button` node.\n2. Set the corresponding `PORT`.\n3. Link `PRS` with the `RST` pin.\n4. Upload the program.\n\nHeat or cool down the thermometer. Use the new button to turn the alarm off until the new trigger event is encountered.",
          "id": "By-2_Dz_V",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 5,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "BJe0TwcdE": {
          "id": "BJe0TwcdE",
          "input": {
            "nodeId": "SyAp6P9_N",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "BkejTPcd4",
            "pinKey": "HkyxURuSPyW"
          }
        },
        "SJAWU_Ld4": {
          "id": "SJAWU_Ld4",
          "input": {
            "nodeId": "Byje8OL_4",
            "pinKey": "HJCfI0dBDkb"
          },
          "output": {
            "nodeId": "Hkxu3dvzuN",
            "pinKey": "B19RYS3lW"
          }
        },
        "SJEg8uL_4": {
          "id": "SJEg8uL_4",
          "input": {
            "nodeId": "BkblI_8O4",
            "pinKey": "HJjZLRdBw1-"
          },
          "output": {
            "nodeId": "Hkd2ODfu4",
            "pinKey": "rkFgMITM-"
          }
        },
        "SkViTvquE": {
          "id": "SkViTvquE",
          "input": {
            "nodeId": "ryZ_3dvM_E",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "BkejTPcd4",
            "pinKey": "HkyxURuSPyW"
          }
        },
        "r1Xx8u8OV": {
          "id": "r1Xx8u8OV",
          "input": {
            "nodeId": "Hkxu3dvzuN",
            "pinKey": "rJg00Nhe-"
          },
          "output": {
            "nodeId": "Hkd2ODfu4",
            "pinKey": "rkFgMITM-"
          }
        },
        "rkRZCPq_V": {
          "id": "rkRZCPq_V",
          "input": {
            "nodeId": "BkejTPcd4",
            "pinKey": "Bkh8A_Sv1-"
          },
          "output": {
            "nodeId": "Byje8OL_4",
            "pinKey": "SJyXI0OrD1-"
          }
        },
        "rkhZId8u4": {
          "id": "rkhZId8u4",
          "input": {
            "nodeId": "Byje8OL_4",
            "pinKey": "BJaG80urD1-"
          },
          "output": {
            "nodeId": "BkblI_8O4",
            "pinKey": "HktZUCdrPkZ"
          }
        }
      },
      "nodes": {
        "BkblI_8O4": {
          "boundLiterals": {
            "SJqZ8COrDkW": "18"
          },
          "id": "BkblI_8O4",
          "position": {
            "x": 10,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/less"
        },
        "BkejTPcd4": {
          "id": "BkejTPcd4",
          "position": {
            "x": 9,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/flip-flop"
        },
        "Byje8OL_4": {
          "id": "Byje8OL_4",
          "position": {
            "x": 10,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/or"
        },
        "Hkd2ODfu4": {
          "boundLiterals": {
            "H1s0WI6MZ": "A1"
          },
          "id": "Hkd2ODfu4",
          "position": {
            "x": 10,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/common-hardware/thermometer-tmp36"
        },
        "Hkxu3dvzuN": {
          "boundLiterals": {
            "HJbACN3gb": "26"
          },
          "id": "Hkxu3dvzuN",
          "position": {
            "x": 13,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/greater"
        },
        "SyAp6P9_N": {
          "id": "SyAp6P9_N",
          "position": {
            "x": 11,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "ryZ_3dvM_E": {
          "boundLiterals": {
            "B1oqkTnIb": "D11"
          },
          "id": "ryZ_3dvM_E",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        }
      },
      "path": "@/203-permanent-alarm"
    },
    "@/204-run-for-x-seconds": {
      "comments": {
        "Hy82VbGqN": {
          "content": "## Additional excercise\n\nCombine a few `delay` nodes by chaining `DONE` and `SET` pins to get a custom pattern of the blinking LED. Use the `or` node to combine `ACT` values as necessary.",
          "id": "Hy82VbGqN",
          "position": {
            "x": 14,
            "y": 2,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 7,
            "units": "slots"
          }
        },
        "SJr0M7FU_E": {
          "content": "# Run for X Seconds\n\nHere is a device that turns on the LED for ten seconds on boot.\n\nThe `delay` node helps us with this task. Generally, this node is used to postpone a pulse for some time, but when the `delay` node is activated it also outputs `True` value on the `ACT` pin. That's what we need.\n\n## Exercise\n\nLet’s modify the device so that the LED turns on for three seconds on a button press.\n\n1. Replace `boot` with the a `button` node and bind the corresponding `PORT`.\n2. Link it with the `SET` pin of the `delay` node.\n3. Change the `T` value to 3.\n4. Upload the program\n\nPress the button and see how the LED behaves. Try to press the button many times while the LED glows and see how each press postpones the delay to be elapsed three seconds after the *last* press.\n\n",
          "id": "SJr0M7FU_E",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 6,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "HJSUXFL_E": {
          "id": "HJSUXFL_E",
          "input": {
            "nodeId": "Sy-Cfmt8uE",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "BJTSmtLOV",
            "pinKey": "HkU3vNoTW"
          }
        },
        "SkDUmKUuV": {
          "id": "SkDUmKUuV",
          "input": {
            "nodeId": "r1xAGQFI_V",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "BJTSmtLOV",
            "pinKey": "HkU3vNoTW"
          }
        },
        "SyyCVWZt4": {
          "id": "SyyCVWZt4",
          "input": {
            "nodeId": "BJTSmtLOV",
            "pinKey": "SkSuD6LMb"
          },
          "output": {
            "nodeId": "SkAaV-bYE",
            "pinKey": "ryVmUAOrvkb"
          }
        }
      },
      "nodes": {
        "BJTSmtLOV": {
          "boundLiterals": {
            "SkSuD6LMb": "On Boot",
            "Skre8ROSv1-": "10"
          },
          "id": "BJTSmtLOV",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/delay"
        },
        "SkAaV-bYE": {
          "id": "SkAaV-bYE",
          "position": {
            "x": 9,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/core/boot"
        },
        "Sy-Cfmt8uE": {
          "id": "Sy-Cfmt8uE",
          "position": {
            "x": 12,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "r1xAGQFI_V": {
          "boundLiterals": {
            "B1oqkTnIb": "D11"
          },
          "id": "r1xAGQFI_V",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        }
      },
      "path": "@/204-run-for-x-seconds"
    },
    "@/205-loops": {
      "comments": {
        "S1Noua9DuN": {
          "content": "# Loops\n\nLet's make a simple traffic light. Each light is activated by the `delay` node. When the latest one finishes it sends a pulse to the begining and our traffic light starts over.\n\nTo make the loop we need a special `defer` node. When `defer` node receives some value or pulse it postpones downstream nodes evaluation until the next transaction.\n\nThe `defer` node is always required when you make a loop to avoid deadlocks. For now, you can remember to place `defer` nodes right in the places where you want to complete a feedback loop. Read the guide to better understand the [execution model](https://xod.io/docs/guide/execution-model/#feedback-loops-handling?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial).\n\nProgram begins with the initial `boot` pulse. Then each delay node triggers the next one. The latest one pulses back to the beginning, and it works continuously.\n\n## Exercise\n\nLet's bring the button back and make the device start with the button press.\n\n1. Assemble a circuit according to the [scheme](https://xod.io/docs/tutorial/205-loops/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#circuit).\n2. Replace `boot` with the `button` node and bind the corresponding `PORT` value.\n3. Link with a free pin of the `any` node.\n4. Upload the program.\n\nPress the button to run the chain.",
          "id": "S1Noua9DuN",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 7,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "BJvk0cv_E": {
          "id": "BJvk0cv_E",
          "input": {
            "nodeId": "ByH1C9w_V",
            "pinKey": "SkSuD6LMb"
          },
          "output": {
            "nodeId": "ryPnaqwON",
            "pinKey": "Bk4gU0drwJ-"
          }
        },
        "Bkqn65wOE": {
          "id": "Bkqn65wOE",
          "input": {
            "nodeId": "ryPnaqwON",
            "pinKey": "SkSuD6LMb"
          },
          "output": {
            "nodeId": "ByZs_TqvOV",
            "pinKey": "Bk4gU0drwJ-"
          }
        },
        "HkHpDWWtE": {
          "id": "HkHpDWWtE",
          "input": {
            "nodeId": "Hy2dZdq_E",
            "pinKey": "ryv7IRdSP1b"
          },
          "output": {
            "nodeId": "BJrt-u5dV",
            "pinKey": "HJhXDIY9-"
          }
        },
        "HkUIvbZK4": {
          "id": "HkUIvbZK4",
          "input": {
            "nodeId": "BJrt-u5dV",
            "pinKey": "BJI7P8t9Z"
          },
          "output": {
            "nodeId": "ByH1C9w_V",
            "pinKey": "Bk4gU0drwJ-"
          }
        },
        "HynbvzbYN": {
          "id": "HynbvzbYN",
          "input": {
            "nodeId": "Hy2dZdq_E",
            "pinKey": "ByU7LRuSPkW"
          },
          "output": {
            "nodeId": "HycWDzbY4",
            "pinKey": "ryVmUAOrvkb"
          }
        },
        "r1Yoq2oO4": {
          "id": "r1Yoq2oO4",
          "input": {
            "nodeId": "ByZs_TqvOV",
            "pinKey": "SkSuD6LMb"
          },
          "output": {
            "nodeId": "Hy2dZdq_E",
            "pinKey": "ByHmL0uHPk-"
          }
        },
        "rkLuvbbYE": {
          "id": "rkLuvbbYE",
          "input": {
            "nodeId": "H1ZdvbWK4",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "ryPnaqwON",
            "pinKey": "HkU3vNoTW"
          }
        },
        "rySdv-WYE": {
          "id": "rySdv-WYE",
          "input": {
            "nodeId": "BJGdPZWtV",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "ByH1C9w_V",
            "pinKey": "HkU3vNoTW"
          }
        },
        "rydvD-Wt4": {
          "id": "rydvD-Wt4",
          "input": {
            "nodeId": "SkBPDWZYN",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "ByZs_TqvOV",
            "pinKey": "HkU3vNoTW"
          }
        }
      },
      "nodes": {
        "BJGdPZWtV": {
          "boundLiterals": {
            "B1oqkTnIb": "D11"
          },
          "id": "BJGdPZWtV",
          "label": "Red LED",
          "position": {
            "x": 16,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        },
        "BJrt-u5dV": {
          "id": "BJrt-u5dV",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/defer"
        },
        "ByH1C9w_V": {
          "boundLiterals": {
            "SkSuD6LMb": "On Boot",
            "Skre8ROSv1-": "5"
          },
          "id": "ByH1C9w_V",
          "position": {
            "x": 13,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/core/delay"
        },
        "ByZs_TqvOV": {
          "boundLiterals": {
            "SkSuD6LMb": "On Boot",
            "Skre8ROSv1-": "3"
          },
          "id": "ByZs_TqvOV",
          "position": {
            "x": 13,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/delay"
        },
        "H1ZdvbWK4": {
          "boundLiterals": {
            "B1oqkTnIb": "D12"
          },
          "id": "H1ZdvbWK4",
          "label": "Yellow LED",
          "position": {
            "x": 16,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        },
        "Hy2dZdq_E": {
          "boundLiterals": {
            "ByU7LRuSPkW": "On Boot",
            "ryv7IRdSP1b": "On Boot"
          },
          "id": "Hy2dZdq_E",
          "position": {
            "x": 14,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/any"
        },
        "HycWDzbY4": {
          "id": "HycWDzbY4",
          "position": {
            "x": 15,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/core/boot"
        },
        "SkBPDWZYN": {
          "boundLiterals": {
            "B1oqkTnIb": "D13"
          },
          "id": "SkBPDWZYN",
          "label": "Green LED",
          "position": {
            "x": 16,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        },
        "ryPnaqwON": {
          "boundLiterals": {
            "SkSuD6LMb": "On Boot",
            "Skre8ROSv1-": "2"
          },
          "id": "ryPnaqwON",
          "position": {
            "x": 13,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/delay"
        }
      },
      "path": "@/205-loops"
    },
    "@/206-fade": {
      "comments": {
        "rkUlhBcDkYV": {
          "content": "# Fade\n\nHere is a program with the LED that turns on smoothly while the button is pressed.\n\nTo make a smooth transition from 0 to 1 and vice versa we use the `fade` node from the XOD standard library. It transforms its output value toward the target value with the rate specified.\n\nIn some cases this node helps to reduce bouncing or power bursts. For example, when you rotate a motor without smooth acceleration, it can cause a voltage drop and whole device reboot.\n\n## Exercise\n\nTest the `fade` node with `servo`.\n\n1. Add a `servo` next to `led` and link it with `fade` too.\n\n2. Bind 2.0 to the `RATE` pin to get a faster transition.\n\n3. Upload the program.\n\nPress and hold the button a few times. Observe how `fade` smoothens the transition and changes the direction if the re-targeted in the middle of the process.\n\nRemove the `fade` node, link to `button` directly, and take a look at the board. When the motor starts moving you can see board LEDs are dimming; the board even can reboot.",
          "id": "rkUlhBcDkYV",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 7,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "BkzT6D1FN": {
          "id": "BkzT6D1FN",
          "input": {
            "nodeId": "BJLhH5vJY4",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "HJTd9D1Y4",
            "pinKey": "BJ0M5JKUW"
          }
        },
        "Sk4cwZfKV": {
          "id": "Sk4cwZfKV",
          "input": {
            "nodeId": "HJTd9D1Y4",
            "pinKey": "HyYJqJFLZ"
          },
          "output": {
            "nodeId": "Sk8i4WMYV",
            "pinKey": "BJ--G1tI-"
          }
        },
        "rybppvkYN": {
          "id": "rybppvkYN",
          "input": {
            "nodeId": "HyV2r5vJKN",
            "pinKey": "HyYh1a3LZ"
          },
          "output": {
            "nodeId": "HJTd9D1Y4",
            "pinKey": "BJ0M5JKUW"
          }
        }
      },
      "nodes": {
        "BJLhH5vJY4": {
          "id": "BJLhH5vJY4",
          "position": {
            "x": 11,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "HJTd9D1Y4": {
          "boundLiterals": {
            "BJ0M5JKUW": "0",
            "BkweckF8-": "1"
          },
          "id": "HJTd9D1Y4",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/fade"
        },
        "HyV2r5vJKN": {
          "boundLiterals": {
            "B1oqkTnIb": "D11"
          },
          "id": "HyV2r5vJKN",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/common-hardware/led"
        },
        "Sk8i4WMYV": {
          "boundLiterals": {
            "ByNiWkt8Z": "D13"
          },
          "id": "Sk8i4WMYV",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/button"
        }
      },
      "path": "@/206-fade"
    },
    "@/207-buses": {
      "comments": {
        "SJJLDWfqE": {
          "content": "## 👆 Shortcut\n\nAnother fast way to create a bus is from an existing link. Select a link and press \"B\". XOD breaks the link and adds bus nodes instead.",
          "id": "SJJLDWfqE",
          "position": {
            "x": 9,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 6,
            "units": "slots"
          }
        },
        "SJpHCJF8O4": {
          "content": "# Buses\n\nIt's time to learn how to keep the program clean and get rid of link intersections.\n\nYou can see triangle nodes on the patch. These nodes are called *buses*.\n\nIt's an alternative way to link nodes' pins. They create “invisible” links. There are two node types in `xod/patch-nodes` that work in tandem:\n\n- `to-bus` — defines a new bus\n\n- `from-bus` — sources data from an existing bus\n\nBus nodes with the same label are considered to be implicitly interconnected by XOD. You can make a few `from-bus` nodes with the same label.\n\n## Exercise\n\nLink the `IVAL` pin with the counter output using bus nodes.\n\n1. First of all, we'll make a loop. So place a `defer` node.\n2. Place `to-bus`.\n3. Label it \"IVAL\".\n4. Link these nodes.\n5. Click on the `IVAL` pin of the `clock` node and the press the \"B\" key on your keyboard. The label automatically sets from the linking pin label.\n6. Upload the program.",
          "id": "SJpHCJF8O4",
          "position": {
            "x": 0,
            "y": -1,
            "units": "slots"
          },
          "size": {
            "height": 7,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "B1xGj9bzK4": {
          "id": "B1xGj9bzK4",
          "input": {
            "nodeId": "S1d_cZzKN",
            "pinKey": "SkUjZA_L-"
          },
          "output": {
            "nodeId": "rJfjcWztE",
            "pinKey": "__out__"
          }
        },
        "Hy_32bGFE": {
          "id": "Hy_32bGFE",
          "input": {
            "nodeId": "rJLnh-Mt4",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "S1d_cZzKN",
            "pinKey": "r1yhZRd8W"
          }
        },
        "Hyj5qbfYE": {
          "id": "Hyj5qbfYE",
          "input": {
            "nodeId": "SyF9qZfKN",
            "pinKey": "BJI7P8t9Z"
          },
          "output": {
            "nodeId": "SykcqZztN",
            "pinKey": "H1E8AuSPkZ"
          }
        },
        "SkGFqWzY4": {
          "id": "SkGFqWzY4",
          "input": {
            "nodeId": "S1d_cZzKN",
            "pinKey": "HJAq-A_8-"
          },
          "output": {
            "nodeId": "HJeYcbzKN",
            "pinKey": "HJU8CE2lW"
          }
        },
        "rkb9c-ftN": {
          "id": "rkb9c-ftN",
          "input": {
            "nodeId": "SykcqZztN",
            "pinKey": "rJXICuSwyW"
          },
          "output": {
            "nodeId": "S1d_cZzKN",
            "pinKey": "r1yhZRd8W"
          }
        },
        "rylRcc-fFE": {
          "id": "rylRcc-fFE",
          "input": {
            "nodeId": "rJRqcZzK4",
            "pinKey": "__in__"
          },
          "output": {
            "nodeId": "SyF9qZfKN",
            "pinKey": "HJhXDIY9-"
          }
        }
      },
      "nodes": {
        "HJeYcbzKN": {
          "id": "HJeYcbzKN",
          "position": {
            "x": 10,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "S1d_cZzKN": {
          "boundLiterals": {
            "r1yhZRd8W": "0"
          },
          "id": "S1d_cZzKN",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/count"
        },
        "SyF9qZfKN": {
          "id": "SyF9qZfKN",
          "position": {
            "x": 11,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/defer"
        },
        "SykcqZztN": {
          "boundLiterals": {
            "HJG8C_SPkb": "10"
          },
          "id": "SykcqZztN",
          "position": {
            "x": 9,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/equal"
        },
        "rJLnh-Mt4": {
          "id": "rJLnh-Mt4",
          "position": {
            "x": 13,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "rJRqcZzK4": {
          "id": "rJRqcZzK4",
          "label": "RST",
          "position": {
            "x": 11,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/patch-nodes/to-bus"
        },
        "rJfjcWztE": {
          "id": "rJfjcWztE",
          "label": "RST",
          "position": {
            "x": 11,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/from-bus"
        }
      },
      "path": "@/207-buses"
    },
    "@/208-accumulator": {
      "comments": {
        "Sy6ZBBij_E": {
          "content": "# Accumulator\n\nLet's make a device which helps us in adding numbers. We will learn how to memorize values and update them.\n\nThe XOD standard library contains a `buffer` node which memorizes the input value when it receives a pulse.\n\nTo make some calculations and apply them to a stored value we should make a loop from the buffer output to the calculations and back to the buffer input.\n\nTo avoid limitless calculations and make it possible to reset the buffer we need a `select` node. It feeds the calculation result to the `buffer` node on a pulse.\n\nIn this example we're using the `add` node, but the calculation may be arbitrary complex.\n\n## Exercise\n\nExamine how the input value and pulses affect the stored result.\n\n1. Upload the program.\n2. Change the `tweak-number` value.\n3. Send pulse from the \"ADD\" node.\n4. Repeat the second and third steps a few times.\n5. Send pulse from \"RESET\".\n\nReplace tweak nodes with a coin acceptor and button to make a ticket system or photo booth.",
          "id": "Sy6ZBBij_E",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 7,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "B1qjTsoOE": {
          "id": "B1qjTsoOE",
          "input": {
            "nodeId": "rk_ipoo_E",
            "pinKey": "__in__"
          },
          "output": {
            "nodeId": "ByVoajjuN",
            "pinKey": "HJhXDIY9-"
          }
        },
        "ByiqpjouN": {
          "id": "ByiqpjouN",
          "input": {
            "nodeId": "BkY4OiiON",
            "pinKey": "HkXm80uHPyb"
          },
          "output": {
            "nodeId": "ryrvujjd4",
            "pinKey": "S1yaHC6UW"
          }
        },
        "H1WOdsjuN": {
          "id": "H1WOdsjuN",
          "input": {
            "nodeId": "BkCE_ijO4",
            "pinKey": "HkqmLAOrD1W"
          },
          "output": {
            "nodeId": "BJ3m_ij_V",
            "pinKey": "ByfGSDjQE"
          }
        },
        "S1Staii_N": {
          "id": "S1Staii_N",
          "input": {
            "nodeId": "BkCE_ijO4",
            "pinKey": "BJnQUR_BwyZ"
          },
          "output": {
            "nodeId": "rJVF6sjdN",
            "pinKey": "__out__"
          }
        },
        "SJgjTsi_4": {
          "id": "SJgjTsi_4",
          "input": {
            "nodeId": "r1IEdsodV",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "BkY4OiiON",
            "pinKey": "r1lQLAOBwJb"
          }
        },
        "SkYFasj_4": {
          "id": "SkYFasj_4",
          "input": {
            "nodeId": "ryrvujjd4",
            "pinKey": "S10qrR6UZ"
          },
          "output": {
            "nodeId": "BkCE_ijO4",
            "pinKey": "SyomIRurDJ-"
          }
        },
        "rkFwusi_N": {
          "id": "rkFwusi_N",
          "input": {
            "nodeId": "ryrvujjd4",
            "pinKey": "rkmiHCaIZ"
          },
          "output": {
            "nodeId": "Hk-VOooON",
            "pinKey": "Bkf4BDsmV"
          }
        },
        "ry6qajoO4": {
          "id": "ry6qajoO4",
          "input": {
            "nodeId": "BkY4OiiON",
            "pinKey": "Hy-QUR_BPkZ"
          },
          "output": {
            "nodeId": "ryrvujjd4",
            "pinKey": "rkWHDAW_f"
          }
        },
        "ryIqTooOE": {
          "id": "ryIqTooOE",
          "input": {
            "nodeId": "ryrvujjd4",
            "pinKey": "rJUjrCTUb"
          },
          "output": {
            "nodeId": "H1-c6siuN",
            "pinKey": "Bkf4BDsmV"
          }
        },
        "ryrsaso_N": {
          "id": "ryrsaso_N",
          "input": {
            "nodeId": "ByVoajjuN",
            "pinKey": "BJI7P8t9Z"
          },
          "output": {
            "nodeId": "BkY4OiiON",
            "pinKey": "r1lQLAOBwJb"
          }
        }
      },
      "nodes": {
        "BJ3m_ij_V": {
          "boundLiterals": {
            "ByfGSDjQE": "0"
          },
          "id": "BJ3m_ij_V",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/tweak-number"
        },
        "BkCE_ijO4": {
          "id": "BkCE_ijO4",
          "position": {
            "x": 8,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/add"
        },
        "BkY4OiiON": {
          "id": "BkY4OiiON",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/core/buffer"
        },
        "ByVoajjuN": {
          "id": "ByVoajjuN",
          "position": {
            "x": 10,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/core/defer"
        },
        "H1-c6siuN": {
          "id": "H1-c6siuN",
          "label": "RESET",
          "position": {
            "x": 13,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-pulse"
        },
        "Hk-VOooON": {
          "id": "Hk-VOooON",
          "label": "ADD",
          "position": {
            "x": 11,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/debug/tweak-pulse"
        },
        "r1IEdsodV": {
          "id": "r1IEdsodV",
          "position": {
            "x": 8,
            "y": 5,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "rJVF6sjdN": {
          "id": "rJVF6sjdN",
          "label": "VAL",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/from-bus"
        },
        "rk_ipoo_E": {
          "id": "rk_ipoo_E",
          "label": "VAL",
          "position": {
            "x": 10,
            "y": 5,
            "units": "slots"
          },
          "type": "xod/patch-nodes/to-bus"
        },
        "ryrvujjd4": {
          "boundLiterals": {
            "rygjH06LW": "0"
          },
          "id": "ryrvujjd4",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/select"
        }
      },
      "path": "@/208-accumulator"
    },
    "@/209-slow-down": {
      "comments": {
        "rkzvF9ytV": {
          "content": "# Slow Down\n\nYou often see the \"Loop\" value bound to `UPD` pins.\n\n\"Loop\" (also known as \"Continuously\") means that XOD tries to pulse these nodes as fast as it can. These nodes evaluate themselves on each transaction.\n\nSometimes it's excessive and may lead to slowing the program performance. Especially if you're working with sensors that depend on timing like an ultrasonic range meter.\n\nTo avoid this, you can replace the \"Continuously\" with another source that pulses with the desired interval or only when necessary. For example, a `clock` node.\n\n## Exercise\n\nMake the temperature display less sporadic.\n\n1. Place a `clock` node.\n2. Link it with the `UPD` pin of the `thermometer-tmp36` node.\n3. Place `pulse-on-change` between `Tc` and `UPD` of the text LCD.\n4. Upload the program.\n\nHeat and cool down the thermometer and observe the incremental changes of the data shown.",
          "id": "rkzvF9ytV",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 7,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "SJ7oKq1KV": {
          "id": "SJ7oKq1KV",
          "input": {
            "nodeId": "Bkv9F91FV",
            "pinKey": "H1bLN9F-b"
          },
          "output": {
            "nodeId": "B1JqY9JYE",
            "pinKey": "rkFgMITM-"
          }
        }
      },
      "nodes": {
        "B1JqY9JYE": {
          "id": "B1JqY9JYE",
          "position": {
            "x": 12,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/thermometer-tmp36"
        },
        "Bkv9F91FV": {
          "boundLiterals": {
            "B1TSE9tZ-": "\"Temperature:\""
          },
          "id": "Bkv9F91FV",
          "position": {
            "x": 9,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/common-hardware/text-lcd-16x2-i2c"
        }
      },
      "path": "@/209-slow-down"
    },
    "@/210-string-formatting": {
      "links": {
        "B1Ypc4GK4": {
          "id": "B1Ypc4GK4",
          "input": {
            "nodeId": "Bk8a5NfFN",
            "pinKey": "B1TSE9tZ-"
          },
          "output": {
            "nodeId": "HkNkC5yKV",
            "pinKey": "rksccsp-W"
          }
        },
        "SJCmOrfFV": {
          "id": "SJCmOrfFV",
          "input": {
            "nodeId": "HkT0TcyFE",
            "pinKey": "BJlHojaWZ"
          },
          "output": {
            "nodeId": "HyY0RjktV",
            "pinKey": "rkFgMITM-"
          }
        },
        "SkBBTBGtN": {
          "id": "SkBBTBGtN",
          "input": {
            "nodeId": "HkNkC5yKV",
            "pinKey": "BkeKcj6ZZ"
          },
          "output": {
            "nodeId": "HkT0TcyFE",
            "pinKey": "r1H_oipZb"
          }
        },
        "r1V8k31tE": {
          "id": "r1V8k31tE",
          "input": {
            "nodeId": "HyY0RjktV",
            "pinKey": "Hk_1fUaMW"
          },
          "output": {
            "nodeId": "SkGApqJKV",
            "pinKey": "HJU8CE2lW"
          }
        }
      },
      "nodes": {
        "Bk8a5NfFN": {
          "id": "Bk8a5NfFN",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/common-hardware/text-lcd-16x2-i2c"
        },
        "HkNkC5yKV": {
          "arityLevel": 2,
          "boundLiterals": {
            "BkeKcj6ZZ-$1": "\"C\"",
            "BkeKcj6ZZ-$2": "\"\"",
            "Hkqu9oaWb": "\"Temp:\""
          },
          "id": "HkNkC5yKV",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/concat"
        },
        "HkT0TcyFE": {
          "boundLiterals": {
            "HJTIija-W": "1"
          },
          "id": "HkT0TcyFE",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/format-number"
        },
        "HyY0RjktV": {
          "id": "HyY0RjktV",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/thermometer-tmp36"
        },
        "SkGApqJKV": {
          "id": "SkGApqJKV",
          "position": {
            "x": 10,
            "y": 0,
            "units": "slots"
          },
          "type": "xod/core/clock"
        }
      },
      "path": "@/210-string-formatting"
    },
    "@/211-units-of-measure": {
      "comments": {
        "ByAtz2JY4": {
          "content": "# Units of Measure\n\nThe standard `xod/units` library contains a few nodes for converting some popular units. For example, Celsius to Fahrenheit, degrees to radians and so on.\n\nOne of these nodes (`c-to-f`) is already on the patch and the program shows temperature in Fahrenheit.\n\n## Exercise\n\nLet's improve the program to see a temperature in Fahrenheit only when the button is pressed.\n\n1. Add `if-else` below `button`.\n2. Link `PRS` with `COND`.\n3. Link `Tc` with `F`.\n4. Link output from `c-to-f` with `T`.\n5. Link `R` with the second pin of `concat`.\n6. Upload the program.\n\nGreat! However, we still get a \"C\" on the LCD, even when the temperature converted to the Fahrenheit. Let's fix it.\n\n1. Add one more `if-else`.\n2. Link `PRS` to the new `COND` pin.\n3. Bind `\"F\"` to the `T` pin, and `\"C\"` to the `F` pin.\n4. Link `R` with the latest pin of the `concat` node.\n5. Upload the program again.",
          "id": "ByAtz2JY4",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 7,
            "width": 7,
            "units": "slots"
          }
        },
        "S19HjZfcV": {
          "content": "## 👆 Remember the quotes\n\nAs was mentioned, the `if-else` node can work with numbers *and* strings depending on the incoming value type. The `\"F\"` and `\"C\"` values you bind have to be put in quotes so that XOD knows what data type do you mean.\n\nSee the [generic nodes guide](https://xod.io/docs/guide/generics/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial) for better understanding.",
          "id": "S19HjZfcV",
          "position": {
            "x": 16,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "links": {
        "Bk9usEzYV": {
          "id": "Bk9usEzYV",
          "input": {
            "nodeId": "H1E_oNGF4",
            "pinKey": "Skd9Qa_8W"
          },
          "output": {
            "nodeId": "SyeS9M2kt4",
            "pinKey": "rkFgMITM-"
          }
        },
        "BkkaG31FE": {
          "id": "BkkaG31FE",
          "input": {
            "nodeId": "H1aifnJYN",
            "pinKey": "B1TSE9tZ-"
          },
          "output": {
            "nodeId": "Hk_2f3yYV",
            "pinKey": "rksccsp-W"
          }
        },
        "rJBFiNGtN": {
          "id": "rJBFiNGtN",
          "input": {
            "nodeId": "Hk_2f3yYV",
            "pinKey": "BkeKcj6ZZ"
          },
          "output": {
            "nodeId": "H1E_oNGF4",
            "pinKey": "H1kiQaO8W"
          }
        }
      },
      "nodes": {
        "H1E_oNGF4": {
          "id": "H1E_oNGF4",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/units/c-to-f"
        },
        "H1aifnJYN": {
          "id": "H1aifnJYN",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/common-hardware/text-lcd-16x2-i2c"
        },
        "HkRTG31KE": {
          "boundLiterals": {
            "ByNiWkt8Z": "D13"
          },
          "id": "HkRTG31KE",
          "position": {
            "x": 13,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/button"
        },
        "Hk_2f3yYV": {
          "arityLevel": 3,
          "boundLiterals": {
            "BkeKcj6ZZ-$1": "\"\\x99\"",
            "BkeKcj6ZZ-$2": "\"C\"",
            "Hkqu9oaWb": "\"Temp: \""
          },
          "id": "Hk_2f3yYV",
          "position": {
            "x": 8,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/concat"
        },
        "SyeS9M2kt4": {
          "id": "SyeS9M2kt4",
          "position": {
            "x": 9,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/common-hardware/thermometer-tmp36"
        }
      },
      "path": "@/211-units-of-measure"
    },
    "@/300-creating-nodes": {
      "comments": {
        "HJmjFoNFV": {
          "content": "# Creating Your Own Nodes\n\nIn this part of the tutorial, you will learn how to create your own XOD nodes.\n\nWe will take an existing patch and *extract* a part of it into a separate node with a few input pins to control its parameters.\n\nThen we will add labels and descriptions that will be displayed in the help panel for our node, just like for the XOD standard library.",
          "id": "HJmjFoNFV",
          "position": {
            "x": 1,
            "y": 1,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 7,
            "units": "slots"
          }
        }
      },
      "path": "@/300-creating-nodes"
    },
    "@/301-create-new-patch": {
      "comments": {
        "HyUpM3Z5E": {
          "content": "For the rest of this part of the tutorial we’ll evolve the node chapter after the chapter and effectively create many versions of it with incremental improvements. We recommend to mirror the improvements to the sole patch you created just now.",
          "id": "HyUpM3Z5E",
          "position": {
            "x": -1,
            "y": 6,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 8,
            "units": "slots"
          }
        },
        "SkZ6KsEFE": {
          "content": "# Creating a New Patch\n\nHere is a patch that checks if a number is between `0.4` and `0.7`. Let's make it reusable by converting into a node that takes three numbers and outputs a boolean. The first number is the one we want to check and the other two are boundaries instead of the hard-coded `0.4` and `0.7`.\n\n⚠️ Before you proceed, remember the location of this chapter in the Project Browser to come back after you complete the instructions. Keeping the track might be easier if you open [this part of the tutorial in a web-browser](https://xod.io/docs/tutorial/301-create-new-patch/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial).\n\n## Instructions\n\n1. Select `less`, `greater`, and `nor` nodes  and copy them to the clipboard.\n2. Select File -> New Patch... from the main menu.\n3. Choose a name (`between` is a nice one).\n4. Your new patch will open in a new tab. Paste the nodes that you copied earlier there.\n",
          "id": "SkZ6KsEFE",
          "position": {
            "x": -1,
            "y": 1,
            "units": "slots"
          },
          "size": {
            "height": 5,
            "width": 8,
            "units": "slots"
          }
        }
      },
      "links": {
        "BJosTaOKN": {
          "id": "BJosTaOKN",
          "input": {
            "nodeId": "BktiaTOtV",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "H1_YaadK4",
            "pinKey": "rJqfIRdHwkW"
          }
        },
        "H1sKTTuKE": {
          "id": "H1sKTTuKE",
          "input": {
            "nodeId": "H1_YaadK4",
            "pinKey": "S1dG8AOBPJW"
          },
          "output": {
            "nodeId": "BJpLTauYE",
            "pinKey": "B19RYS3lW"
          }
        },
        "HkO96adK4": {
          "id": "HkO96adK4",
          "input": {
            "nodeId": "BJpLTauYE",
            "pinKey": "rJg00Nhe-"
          },
          "output": {
            "nodeId": "Hy19pauKN",
            "pinKey": "ByfGSDjQE"
          }
        },
        "SJ5tppdtV": {
          "id": "SJ5tppdtV",
          "input": {
            "nodeId": "H1_YaadK4",
            "pinKey": "r1tz8CdBDkb"
          },
          "output": {
            "nodeId": "Hkh7TTOtN",
            "pinKey": "HktZUCdrPkZ"
          }
        },
        "rkDqaadKE": {
          "id": "rkDqaadKE",
          "input": {
            "nodeId": "Hkh7TTOtN",
            "pinKey": "HJjZLRdBw1-"
          },
          "output": {
            "nodeId": "Hy19pauKN",
            "pinKey": "ByfGSDjQE"
          }
        }
      },
      "nodes": {
        "BJpLTauYE": {
          "boundLiterals": {
            "HJbACN3gb": "0.7"
          },
          "id": "BJpLTauYE",
          "position": {
            "x": 12,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/core/greater"
        },
        "BktiaTOtV": {
          "id": "BktiaTOtV",
          "position": {
            "x": 9,
            "y": 7,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "H1_YaadK4": {
          "id": "H1_YaadK4",
          "position": {
            "x": 9,
            "y": 5,
            "units": "slots"
          },
          "type": "xod/core/nor"
        },
        "Hkh7TTOtN": {
          "boundLiterals": {
            "SJqZ8COrDkW": "0.4"
          },
          "id": "Hkh7TTOtN",
          "position": {
            "x": 9,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/core/less"
        },
        "Hy19pauKN": {
          "boundLiterals": {
            "ByfGSDjQE": "0.5"
          },
          "id": "Hy19pauKN",
          "position": {
            "x": 9,
            "y": 2,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/tweak-number"
        }
      },
      "path": "@/301-create-new-patch"
    },
    "@/302-check-your-new-patch": {
      "comments": {
        "Sys38g5FN": {
          "content": "# Check Your New Patch\n\nIf the `between` patch you’ve created looks like this one, you did everything right!\n\nContinue to the next chapter.\n",
          "id": "Sys38g5FN",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 4,
            "width": 9,
            "units": "slots"
          }
        }
      },
      "links": {
        "BkXJAVectE": {
          "id": "BkXJAVectE",
          "input": {
            "nodeId": "S1-yRVxqK4",
            "pinKey": "S1dG8AOBPJW"
          },
          "output": {
            "nodeId": "rklyREgqtN",
            "pinKey": "B19RYS3lW"
          }
        },
        "BkfyRNgqFE": {
          "id": "BkfyRNgqFE",
          "input": {
            "nodeId": "S1-yRVxqK4",
            "pinKey": "r1tz8CdBDkb"
          },
          "output": {
            "nodeId": "rJyCNl9YE",
            "pinKey": "HktZUCdrPkZ"
          }
        }
      },
      "nodes": {
        "S1-yRVxqK4": {
          "id": "S1-yRVxqK4",
          "position": {
            "x": 11,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/core/nor"
        },
        "rJyCNl9YE": {
          "boundLiterals": {
            "SJqZ8COrDkW": "0.4"
          },
          "id": "rJyCNl9YE",
          "position": {
            "x": 11,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/less"
        },
        "rklyREgqtN": {
          "boundLiterals": {
            "HJbACN3gb": "0.7"
          },
          "id": "rklyREgqtN",
          "position": {
            "x": 14,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/core/greater"
        }
      },
      "path": "@/302-check-your-new-patch"
    },
    "@/303-add-terminals": {
      "comments": {
        "B1nOwhZq4": {
          "content": "## Pin naming convention\n\nConventionally XOD uses pin labels that are similar to IC leg labels. The labels contain at most four characters, and usually, they are mnemonics or abbreviations. The restriction allows rendering patches quite densely.",
          "id": "B1nOwhZq4",
          "position": {
            "x": 13,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 8,
            "units": "slots"
          }
        },
        "rkyWciVFV": {
          "content": "# Terminals\n\nWe need a way for the `between` node to get values in and put values out. In XOD patch nodes interact with the outside world using terminal nodes. You can find the terminal nodes in `xod/patch-nodes` library, they are called `input-number`, `input-pulse`, `output-boolean`, etc.\n\nOn this patch, we already placed an `input-number` and `output-boolean` instead of `tweak-number` and `watch`. The terminals give our node one number input pin and one boolean output. You can check it out by invoking the help box for the node in Project Browser.\n\n## Instructions\n\n1. Reflect the changes to your `between` patch: copy/paste the `IN` and `OUT` terminals there and link them accordingly.\n1. Add two more `input-number`s.\n2. Connect them to `less` and `greater`'s pins instead of hardcoded `0.4` and `0.7` values.\n3. Label the new terminals as `MIN` and `MAX` using Inspector.\n4. Check how the node looks now in the help panel.\n\nNote that node's pin order is determined by the order of respective terminals. Try to reorder the input terminals and look how it affects the preview in the help panel.",
          "id": "rkyWciVFV",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 5,
            "width": 8,
            "units": "slots"
          }
        }
      },
      "links": {
        "BJId0a_FV": {
          "id": "BJId0a_FV",
          "input": {
            "nodeId": "r1gT8CaOYE",
            "pinKey": "rJg00Nhe-"
          },
          "output": {
            "nodeId": "SkX_Ca_YV",
            "pinKey": "__out__"
          }
        },
        "HyfaUCp_FE": {
          "id": "HyfaUCp_FE",
          "input": {
            "nodeId": "rk-pLC6uYV",
            "pinKey": "r1tz8CdBDkb"
          },
          "output": {
            "nodeId": "S1T8RTdKV",
            "pinKey": "HktZUCdrPkZ"
          }
        },
        "SJsvAaOFN": {
          "id": "SJsvAaOFN",
          "input": {
            "nodeId": "ByYwA6dKN",
            "pinKey": "__in__"
          },
          "output": {
            "nodeId": "rk-pLC6uYV",
            "pinKey": "rJqfIRdHwkW"
          }
        },
        "ryVOAp_YE": {
          "id": "ryVOAp_YE",
          "input": {
            "nodeId": "S1T8RTdKV",
            "pinKey": "HJjZLRdBw1-"
          },
          "output": {
            "nodeId": "SkX_Ca_YV",
            "pinKey": "__out__"
          }
        },
        "ryma8Cp_t4": {
          "id": "ryma8Cp_t4",
          "input": {
            "nodeId": "rk-pLC6uYV",
            "pinKey": "S1dG8AOBPJW"
          },
          "output": {
            "nodeId": "r1gT8CaOYE",
            "pinKey": "B19RYS3lW"
          }
        }
      },
      "nodes": {
        "ByYwA6dKN": {
          "id": "ByYwA6dKN",
          "position": {
            "x": 10,
            "y": 6,
            "units": "slots"
          },
          "type": "xod/patch-nodes/output-boolean"
        },
        "S1T8RTdKV": {
          "boundLiterals": {
            "SJqZ8COrDkW": "0.4"
          },
          "id": "S1T8RTdKV",
          "position": {
            "x": 10,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/less"
        },
        "SkX_Ca_YV": {
          "id": "SkX_Ca_YV",
          "position": {
            "x": 10,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-number"
        },
        "r1gT8CaOYE": {
          "boundLiterals": {
            "HJbACN3gb": "0.7"
          },
          "id": "r1gT8CaOYE",
          "position": {
            "x": 13,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/greater"
        },
        "rk-pLC6uYV": {
          "id": "rk-pLC6uYV",
          "position": {
            "x": 10,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/core/nor"
        }
      },
      "path": "@/303-add-terminals"
    },
    "@/304-use-new-node": {
      "comments": {
        "BkIsFbYY4": {
          "content": "# Using Your New Node\n\nNow you can use the new node just like any other.\n\n## Instructions\n\n1. Drag’n’drop your `between` node from Project Browser to this patch and replace the `303-...` node with it.\n2. Add a few more `between`’s: double click on empty space and type “between”. Your node is here and denoted as `@/between`.\n3. Bind some values to the inputs of new `between` nodes, add some `tweak-number` and `watch` nodes to play.\n4. Run simulation to check how the new node works.",
          "id": "BkIsFbYY4",
          "position": {
            "x": 4,
            "y": 2,
            "units": "slots"
          },
          "size": {
            "height": 4,
            "width": 8,
            "units": "slots"
          }
        },
        "H18QI2Z5E": {
          "content": "### Paths starting with @/\n\nThe at (*@*) symbol in the patch path shown by the quick search suggester denotes “*this project*”. That is, the node is located in the current projects, not in a library.",
          "id": "H18QI2Z5E",
          "position": {
            "x": 5,
            "y": 6,
            "units": "slots"
          },
          "size": {
            "height": 2,
            "width": 7,
            "units": "slots"
          }
        },
        "SkyiV2bcE": {
          "content": "<- Place your `between` node instead",
          "id": "SkyiV2bcE",
          "position": {
            "x": 16,
            "y": 4,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 4,
            "units": "slots"
          }
        }
      },
      "links": {
        "HyVFAaOY4": {
          "id": "HyVFAaOY4",
          "input": {
            "nodeId": "ry4r9sVtV",
            "pinKey": "SkX_Ca_YV"
          },
          "output": {
            "nodeId": "rkZKC6dF4",
            "pinKey": "ByfGSDjQE"
          }
        },
        "Sk65C6uY4": {
          "id": "Sk65C6uY4",
          "input": {
            "nodeId": "HyKqCTOFN",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "ry4r9sVtV",
            "pinKey": "ByYwA6dKN"
          }
        }
      },
      "nodes": {
        "HyKqCTOFN": {
          "id": "HyKqCTOFN",
          "position": {
            "x": 14,
            "y": 5,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "rkZKC6dF4": {
          "boundLiterals": {
            "ByfGSDjQE": "0.5"
          },
          "id": "rkZKC6dF4",
          "position": {
            "x": 14,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/tweak-number"
        },
        "ry4r9sVtV": {
          "boundLiterals": {
            "SybBlRdtN": "0.7",
            "rygHlRuFV": "0.4"
          },
          "id": "ry4r9sVtV",
          "position": {
            "x": 14,
            "y": 4,
            "units": "slots"
          },
          "type": "@/303-add-terminals"
        }
      },
      "path": "@/304-use-new-node"
    },
    "@/305-document-it": {
      "comments": {
        "r1Hd6WYFE": {
          "content": "# Adding Documentation\n\nThe only thing our node lacks is proper documentation. The pins are unlabeled and the help panel does not describe what it does at all. Let's fix that.\n\n## Instructions\n\nApply the instructions to your `between` node.\n\n1. Using Inspector add descriptions to the terminal nodes. They will become pin descriptions in the help panel.\n2. Click on any empty space on the patch to see the Inspector for the whole patch.\n3. Add the description for the whole patch. It will become the node's description for the node in the help panel.\n4. Invoke the help box to see how the documentation renders.",
          "id": "r1Hd6WYFE",
          "position": {
            "x": -6,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 4,
            "width": 8,
            "units": "slots"
          }
        }
      },
      "description": "Checks whether a number falls inside the range specified",
      "links": {
        "H1ASvh-9E": {
          "id": "H1ASvh-9E",
          "input": {
            "nodeId": "ryfnfwh-9V",
            "pinKey": "HJbACN3gb"
          },
          "output": {
            "nodeId": "SkOHvnW94",
            "pinKey": "__out__"
          }
        },
        "HyI3zwh-c4": {
          "id": "HyI3zwh-c4",
          "input": {
            "nodeId": "S1hMvhZq4",
            "pinKey": "__in__"
          },
          "output": {
            "nodeId": "rJX3MDhW5V",
            "pinKey": "rJqfIRdHwkW"
          }
        },
        "SJHhfv3Z9N": {
          "id": "SJHhfv3Z9N",
          "input": {
            "nodeId": "rJX3MDhW5V",
            "pinKey": "r1tz8CdBDkb"
          },
          "output": {
            "nodeId": "rye3zPhZcV",
            "pinKey": "HktZUCdrPkZ"
          }
        },
        "SkDhfDh-5E": {
          "id": "SkDhfDh-5E",
          "input": {
            "nodeId": "rye3zPhZcV",
            "pinKey": "HJjZLRdBw1-"
          },
          "output": {
            "nodeId": "HyWnMvnZqV",
            "pinKey": "__out__"
          }
        },
        "r1LHDn-c4": {
          "id": "r1LHDn-c4",
          "input": {
            "nodeId": "rye3zPhZcV",
            "pinKey": "SJqZ8COrDkW"
          },
          "output": {
            "nodeId": "rJkBDh-qV",
            "pinKey": "__out__"
          }
        },
        "ry42zPhb94": {
          "id": "ry42zPhb94",
          "input": {
            "nodeId": "ryfnfwh-9V",
            "pinKey": "rJg00Nhe-"
          },
          "output": {
            "nodeId": "HyWnMvnZqV",
            "pinKey": "__out__"
          }
        },
        "ryOnfwhb54": {
          "id": "ryOnfwhb54",
          "input": {
            "nodeId": "rJX3MDhW5V",
            "pinKey": "S1dG8AOBPJW"
          },
          "output": {
            "nodeId": "ryfnfwh-9V",
            "pinKey": "B19RYS3lW"
          }
        }
      },
      "nodes": {
        "HyWnMvnZqV": {
          "id": "HyWnMvnZqV",
          "position": {
            "x": 4,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-number"
        },
        "S1hMvhZq4": {
          "id": "S1hMvhZq4",
          "position": {
            "x": 4,
            "y": 6,
            "units": "slots"
          },
          "type": "xod/patch-nodes/output-boolean"
        },
        "SkOHvnW94": {
          "id": "SkOHvnW94",
          "label": "MAX",
          "position": {
            "x": 8,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-number"
        },
        "rJX3MDhW5V": {
          "id": "rJX3MDhW5V",
          "position": {
            "x": 4,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/core/nor"
        },
        "rJkBDh-qV": {
          "description": "The lower boundary of the range. Inclusive.",
          "id": "rJkBDh-qV",
          "label": "MIN",
          "position": {
            "x": 5,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/patch-nodes/input-number"
        },
        "rye3zPhZcV": {
          "boundLiterals": {
            "SJqZ8COrDkW": "0.4"
          },
          "id": "rye3zPhZcV",
          "position": {
            "x": 4,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/less"
        },
        "ryfnfwh-9V": {
          "boundLiterals": {
            "HJbACN3gb": "0.7"
          },
          "id": "ryfnfwh-9V",
          "position": {
            "x": 7,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/greater"
        }
      },
      "path": "@/305-document-it"
    },
    "@/306-next-steps": {
      "comments": {
        "Hkln2lqFV": {
          "content": "# Next Steps\n\nWhat you've just learned about making nodes is totally sufficient for day-to-day xoding.\n\nIf you are interested in a more in-depth guide on creating nodes, check out the [docs on xod.io](https://xod.io/docs/guide/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial#making-your-own-nodes). There you will learn about creating nodes in C++, testing them using tabtests and wrapping existing Arduino libraries.",
          "id": "Hkln2lqFV",
          "position": {
            "x": 0,
            "y": 0,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 10,
            "units": "slots"
          }
        }
      },
      "path": "@/306-next-steps"
    },
    "@/999-the-end": {
      "comments": {
        "rJoxlaz9Y4": {
          "content": "# Congratulations!\n\nYou have completed the tutorial. Hope you enjoyed it. May we ask to rate it?\n\n[★★★★★ Excellent!](https://forum.xod.io/t/tutorial-feedback/457/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial_99&utm_term=5_stars)\n[★★★★ Very Good](https://forum.xod.io/t/tutorial-feedback/457/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial_99&utm_term=4_stars)\n[★★★ Okay](https://forum.xod.io/t/tutorial-feedback/457/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial_99&utm_term=3_stars)\n[★★ So-so](https://forum.xod.io/t/tutorial-feedback/457/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial_99&utm_term=2_stars)\n[★ Poor](https://forum.xod.io/t/tutorial-feedback/457/?utm_source=ide&utm_medium=ide_comment&utm_campaign=tutorial_99&utm_term=1_star)\n\nIf you would like to give more detailed feedback, we’ll happy to hear it on the rating page.",
          "id": "rJoxlaz9Y4",
          "position": {
            "x": 0,
            "y": -1,
            "units": "slots"
          },
          "size": {
            "height": 3,
            "width": 11,
            "units": "slots"
          }
        }
      },
      "links": {
        "HJYxx6G5YV": {
          "id": "HJYxx6G5YV",
          "input": {
            "nodeId": "H1NexpMqFV",
            "pinKey": "H1v-80uHDyZ"
          },
          "output": {
            "nodeId": "SkHxxTMctV",
            "pinKey": "BkdbLAuSPyZ"
          }
        },
        "ryqxgpMqK4": {
          "id": "ryqxgpMqK4",
          "input": {
            "nodeId": "Hyzllaz5KE",
            "pinKey": "H1v-80uHDyZ"
          },
          "output": {
            "nodeId": "S1wgxpM9YV",
            "pinKey": "BkdbLAuSPyZ"
          }
        }
      },
      "nodes": {
        "ByLxgpG9Y4": {
          "id": "ByLxgpG9Y4",
          "position": {
            "x": 7,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/patch-nodes/output-number"
        },
        "H1NexpMqFV": {
          "id": "H1NexpMqFV",
          "position": {
            "x": 8,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/math/ceil"
        },
        "Hk-xx6z9KN": {
          "id": "Hk-xx6z9KN",
          "position": {
            "x": 5,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/math/ceil"
        },
        "Hyzllaz5KE": {
          "id": "Hyzllaz5KE",
          "position": {
            "x": 3,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/math/ceil"
        },
        "S1uxgaGqYV": {
          "id": "S1uxgaGqYV",
          "position": {
            "x": 4,
            "y": 2,
            "units": "slots"
          },
          "type": "xod/patch-nodes/output-number"
        },
        "S1wgxpM9YV": {
          "id": "S1wgxpM9YV",
          "position": {
            "x": 1,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/math/ceil"
        },
        "SkHxxTMctV": {
          "id": "SkHxxTMctV",
          "position": {
            "x": 10,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/math/ceil"
        },
        "Skgeaz5tV": {
          "id": "Skgeaz5tV",
          "position": {
            "x": 4,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/math/ceil"
        },
        "SymllpfqYN": {
          "id": "SymllpfqYN",
          "position": {
            "x": 6,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/math/ceil"
        },
        "rkxxlpM9FE": {
          "id": "rkxxlpM9FE",
          "position": {
            "x": 7,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/math/ceil"
        }
      },
      "path": "@/999-the-end"
    },
    "@/clock": {
      "links": {
        "BJ0eHP04Ir": {
          "id": "BJ0eHP04Ir",
          "input": {
            "nodeId": "ry8gSwAEIH",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "rkmgBPRVIr",
            "pinKey": "SJgsCeQvm"
          }
        },
        "BJeUwCN8S": {
          "id": "BJeUwCN8S",
          "input": {
            "nodeId": "ryvxSPAEUr",
            "pinKey": "Bk1C_4rPQ"
          },
          "output": {
            "nodeId": "Hk6BwAVIB",
            "pinKey": "HJU8CE2lW"
          }
        },
        "BkFeSvR4LS": {
          "id": "BkFeSvR4LS",
          "input": {
            "nodeId": "HyMerDC4UH",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "rkmgBPRVIr",
            "pinKey": "rJglsCgmvm"
          }
        },
        "BkhgSPAVIB": {
          "id": "BkhgSPAVIB",
          "input": {
            "nodeId": "rkmgBPRVIr",
            "pinKey": "rkCYRgQDm"
          },
          "output": {
            "nodeId": "ryvxSPAEUr",
            "pinKey": "BklE_1edQ"
          }
        },
        "Byuerw04LH": {
          "id": "Byuerw04LH",
          "input": {
            "nodeId": "H1grD04LB",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "rkmgBPRVIr",
            "pinKey": "BkbiCl7v7"
          }
        },
        "HyZAUwRELH": {
          "id": "HyZAUwRELH",
          "input": {
            "nodeId": "Hk0LvRNIS",
            "pinKey": "H1bLN9F-b"
          },
          "output": {
            "nodeId": "S1lRLPREIB",
            "pinKey": "rksccsp-W"
          }
        },
        "HykleSPAVLH": {
          "id": "HykleSPAVLH",
          "input": {
            "nodeId": "rklgSvCVIB",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "rkmgBPRVIr",
            "pinKey": "BJZls0g7DQ"
          }
        },
        "S1jxrPAV8H": {
          "id": "S1jxrPAV8H",
          "input": {
            "nodeId": "rkWeHD0VLB",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "rkmgBPRVIr",
            "pinKey": "HyA5RgXD7"
          }
        },
        "SJ9lSwCNUS": {
          "id": "SJ9lSwCNUS",
          "input": {
            "nodeId": "SJBeHDANIH",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "rkmgBPRVIr",
            "pinKey": "HJLWQZQPm"
          }
        },
        "SyaxrDCNUS": {
          "id": "SyaxrDCNUS",
          "input": {
            "nodeId": "By4lSPRE8r",
            "pinKey": "HkXK-dGob"
          },
          "output": {
            "nodeId": "rkmgBPRVIr",
            "pinKey": "r1MljClXPm"
          }
        }
      },
      "nodes": {
        "By4lSPRE8r": {
          "id": "By4lSPRE8r",
          "position": {
            "x": 23,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "H1grD04LB": {
          "id": "H1grD04LB",
          "position": {
            "x": 25,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "Hk0LvRNIS": {
          "id": "Hk0LvRNIS",
          "position": {
            "x": 1,
            "y": 4,
            "units": "slots"
          },
          "type": "xod/common-hardware/text-lcd-16x2-i2c"
        },
        "Hk6BwAVIB": {
          "boundLiterals": {
            "B13SCNhl-": "1"
          },
          "id": "Hk6BwAVIB",
          "position": {
            "x": 15,
            "y": -1,
            "units": "slots"
          },
          "type": "xod/core/clock"
        },
        "HyMerDC4UH": {
          "id": "HyMerDC4UH",
          "position": {
            "x": 17,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "S1lRLPREIB": {
          "arityLevel": 6,
          "boundLiterals": {
            "BkeKcj6ZZ": "\"\"",
            "BkeKcj6ZZ-$1": "\"\"",
            "BkeKcj6ZZ-$2": "\"\"",
            "Hkqu9oaWb": "\"Time: \""
          },
          "id": "S1lRLPREIB",
          "position": {
            "x": 4,
            "y": 3,
            "units": "slots"
          },
          "type": "xod/core/concat"
        },
        "SJBeHDANIH": {
          "id": "SJBeHDANIH",
          "position": {
            "x": 19,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "rkWeHD0VLB": {
          "id": "rkWeHD0VLB",
          "position": {
            "x": 13,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "rklgSvCVIB": {
          "id": "rklgSvCVIB",
          "position": {
            "x": 21,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "rkmgBPRVIr": {
          "id": "rkmgBPRVIr",
          "position": {
            "x": 13,
            "y": 1,
            "units": "slots"
          },
          "type": "xod/datetime/unpack-datetime"
        },
        "ry8gSwAEIH": {
          "id": "ry8gSwAEIH",
          "position": {
            "x": 15,
            "y": 3,
            "units": "slots"
          },
          "size": {
            "height": 1,
            "width": 2,
            "units": "slots"
          },
          "type": "xod/debug/watch"
        },
        "ryvxSPAEUr": {
          "id": "ryvxSPAEUr",
          "position": {
            "x": 13,
            "y": 0,
            "units": "slots"
          },
          "type": "xod-dev/ds-rtc/rtc"
        }
      },
      "path": "@/clock"
    }
  },
  "version": "0.29.0"
}
